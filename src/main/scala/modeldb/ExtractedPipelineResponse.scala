/**
 * Generated by Scrooge
 *   version: 18.10.0
 *   rev: dda071e1412b53f4bfdebc19e474f584e475d475
 *   built at: 20181018-174244
 */
package modeldb

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object ExtractedPipelineResponse extends ValidatingThriftStructCodec3[ExtractedPipelineResponse] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("ExtractedPipelineResponse")
  val TransformersField: TField = new TField("transformers", TType.LIST, 1)
  val TransformersFieldManifest: Manifest[Seq[modeldb.Transformer]] = implicitly[Manifest[Seq[modeldb.Transformer]]]
  val SpecsField: TField = new TField("specs", TType.LIST, 2)
  val SpecsFieldManifest: Manifest[Seq[modeldb.TransformerSpec]] = implicitly[Manifest[Seq[modeldb.TransformerSpec]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      TransformersField,
      false,
      false,
      TransformersFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[modeldb.Transformer]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      SpecsField,
      false,
      false,
      SpecsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[modeldb.TransformerSpec]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: ExtractedPipelineResponse): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: ExtractedPipelineResponse): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.transformers)
    buf ++= validateField(item.specs)
    buf.toList
  }

  def withoutPassthroughFields(original: ExtractedPipelineResponse): ExtractedPipelineResponse =
    new Immutable(
      transformers =
        {
          val field = original.transformers
          field.map { field =>
            modeldb.Transformer.withoutPassthroughFields(field)
          }
        },
      specs =
        {
          val field = original.specs
          field.map { field =>
            modeldb.TransformerSpec.withoutPassthroughFields(field)
          }
        }
    )

  override def encode(_item: ExtractedPipelineResponse, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): ExtractedPipelineResponse = {

    var transformers: Seq[modeldb.Transformer] = Seq[modeldb.Transformer]()
    var specs: Seq[modeldb.TransformerSpec] = Seq[modeldb.TransformerSpec]()

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.LIST =>
    
                transformers = readTransformersValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'transformers' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
    
                specs = readSpecsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'specs' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      transformers,
      specs,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): ExtractedPipelineResponse =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[modeldb] def eagerDecode(_iprot: TProtocol): ExtractedPipelineResponse = {
    var transformers: Seq[modeldb.Transformer] = Seq[modeldb.Transformer]()
    var specs: Seq[modeldb.TransformerSpec] = Seq[modeldb.TransformerSpec]()
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.LIST =>
                transformers = readTransformersValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'transformers' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
                specs = readSpecsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'specs' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      transformers,
      specs,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    transformers: Seq[modeldb.Transformer] = Seq[modeldb.Transformer](),
    specs: Seq[modeldb.TransformerSpec] = Seq[modeldb.TransformerSpec]()
  ): ExtractedPipelineResponse =
    new Immutable(
      transformers,
      specs
    )

  def unapply(_item: ExtractedPipelineResponse): _root_.scala.Option[_root_.scala.Tuple2[Seq[modeldb.Transformer], Seq[modeldb.TransformerSpec]]] = _root_.scala.Some(_item.toTuple)


  @inline private[modeldb] def readTransformersValue(_iprot: TProtocol): Seq[modeldb.Transformer] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[modeldb.Transformer](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          modeldb.Transformer.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeTransformersField(transformers_item: Seq[modeldb.Transformer], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TransformersField)
    writeTransformersValue(transformers_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTransformersValue(transformers_item: Seq[modeldb.Transformer], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, transformers_item.size))
    transformers_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = transformers_item.size
        while (_i < _size) {
          val transformers_item_element = transformers_item(_i)
          transformers_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        transformers_item.foreach { transformers_item_element =>
          transformers_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[modeldb] def readSpecsValue(_iprot: TProtocol): Seq[modeldb.TransformerSpec] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[modeldb.TransformerSpec](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          modeldb.TransformerSpec.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeSpecsField(specs_item: Seq[modeldb.TransformerSpec], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SpecsField)
    writeSpecsValue(specs_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSpecsValue(specs_item: Seq[modeldb.TransformerSpec], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, specs_item.size))
    specs_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = specs_item.size
        while (_i < _size) {
          val specs_item_element = specs_item(_i)
          specs_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        specs_item.foreach { specs_item_element =>
          specs_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }


  object Immutable extends ThriftStructCodec3[ExtractedPipelineResponse] {
    override def encode(_item: ExtractedPipelineResponse, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): ExtractedPipelineResponse = ExtractedPipelineResponse.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[ExtractedPipelineResponse] = ExtractedPipelineResponse.metaData
  }

  /**
   * The default read-only implementation of ExtractedPipelineResponse.  You typically should not need to
   * directly reference this class; instead, use the ExtractedPipelineResponse.apply method to construct
   * new instances.
   */
  class Immutable(
      val transformers: Seq[modeldb.Transformer],
      val specs: Seq[modeldb.TransformerSpec],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends ExtractedPipelineResponse {
    def this(
      transformers: Seq[modeldb.Transformer] = Seq[modeldb.Transformer](),
      specs: Seq[modeldb.TransformerSpec] = Seq[modeldb.TransformerSpec]()
    ) = this(
      transformers,
      specs,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val transformers: Seq[modeldb.Transformer],
      val specs: Seq[modeldb.TransformerSpec],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends ExtractedPipelineResponse {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the ExtractedPipelineResponse trait with additional state or
   * behavior and implement the read-only methods from ExtractedPipelineResponse using an underlying
   * instance.
   */
  trait Proxy extends ExtractedPipelineResponse {
    protected def _underlying_ExtractedPipelineResponse: ExtractedPipelineResponse
    override def transformers: Seq[modeldb.Transformer] = _underlying_ExtractedPipelineResponse.transformers
    override def specs: Seq[modeldb.TransformerSpec] = _underlying_ExtractedPipelineResponse.specs
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_ExtractedPipelineResponse._passthroughFields
  }
}

/**
 * Prefer the companion object's [[modeldb.ExtractedPipelineResponse.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait ExtractedPipelineResponse
  extends ThriftStruct
  with _root_.scala.Product2[Seq[modeldb.Transformer], Seq[modeldb.TransformerSpec]]
  with ValidatingThriftStruct[ExtractedPipelineResponse]
  with java.io.Serializable
{
  import ExtractedPipelineResponse._

  def transformers: Seq[modeldb.Transformer]
  def specs: Seq[modeldb.TransformerSpec]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: Seq[modeldb.Transformer] = transformers
  def _2: Seq[modeldb.TransformerSpec] = specs

  def toTuple: _root_.scala.Tuple2[Seq[modeldb.Transformer], Seq[modeldb.TransformerSpec]] = {
    (
      transformers,
      specs
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (transformers ne null) {
                writeTransformersValue(transformers, _oprot)
                _root_.scala.Some(ExtractedPipelineResponse.TransformersField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (specs ne null) {
                writeSpecsValue(specs, _oprot)
                _root_.scala.Some(ExtractedPipelineResponse.SpecsField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): ExtractedPipelineResponse = {
    var transformers: Seq[modeldb.Transformer] = this.transformers
    var specs: Seq[modeldb.TransformerSpec] = this.specs
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        transformers = readTransformersValue(_blob.read)
      case 2 =>
        specs = readSpecsValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      transformers,
      specs,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): ExtractedPipelineResponse = {
    var transformers: Seq[modeldb.Transformer] = this.transformers
    var specs: Seq[modeldb.TransformerSpec] = this.specs

    _fieldId match {
      case 1 =>
        transformers = Seq[modeldb.Transformer]()
      case 2 =>
        specs = Seq[modeldb.TransformerSpec]()
      case _ =>
    }
    new Immutable(
      transformers,
      specs,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetTransformers: ExtractedPipelineResponse = unsetField(1)

  def unsetSpecs: ExtractedPipelineResponse = unsetField(2)


  override def write(_oprot: TProtocol): Unit = {
    ExtractedPipelineResponse.validate(this)
    _oprot.writeStructBegin(Struct)
    if (transformers ne null) writeTransformersField(transformers, _oprot)
    if (specs ne null) writeSpecsField(specs, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    transformers: Seq[modeldb.Transformer] = this.transformers,
    specs: Seq[modeldb.TransformerSpec] = this.specs,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): ExtractedPipelineResponse =
    new Immutable(
      transformers,
      specs,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[ExtractedPipelineResponse]

  private def _equals(x: ExtractedPipelineResponse, y: ExtractedPipelineResponse): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[ExtractedPipelineResponse])

  override def hashCode: Int = {
    var hash = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    hash
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => this.transformers
    case 1 => this.specs
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "ExtractedPipelineResponse"

  def _codec: ValidatingThriftStructCodec3[ExtractedPipelineResponse] = ExtractedPipelineResponse
}

