/**
 * Generated by Scrooge
 *   version: 18.10.0
 *   rev: dda071e1412b53f4bfdebc19e474f584e475d475
 *   built at: 20181018-174244
 */
package modeldb

import com.twitter.scrooge.ThriftEnum
import scala.collection.immutable.{Map => immutable$Map}


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object ModelRankMetric extends _root_.com.twitter.scrooge.ThriftEnumObject[ModelRankMetric] {

  val annotations: immutable$Map[String, String] = immutable$Map.empty

  
  case object Rmse extends modeldb.ModelRankMetric {
    val value: Int = 0
    val name: String = "Rmse"
    val originalName: String = "RMSE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeRmse = _root_.scala.Some(modeldb.ModelRankMetric.Rmse)
  
  case object ExplainedVariance extends modeldb.ModelRankMetric {
    val value: Int = 1
    val name: String = "ExplainedVariance"
    val originalName: String = "EXPLAINED_VARIANCE"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeExplainedVariance = _root_.scala.Some(modeldb.ModelRankMetric.ExplainedVariance)
  
  case object R2 extends modeldb.ModelRankMetric {
    val value: Int = 2
    val name: String = "R2"
    val originalName: String = "R2"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeR2 = _root_.scala.Some(modeldb.ModelRankMetric.R2)

  case class EnumUnknownModelRankMetric(value: Int)
    extends modeldb.ModelRankMetric with _root_.com.twitter.scrooge.EnumItemUnknown
  {
    val name: String = "EnumUnknownModelRankMetric" + value
    def originalName: String = name
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   */
  def apply(value: Int): modeldb.ModelRankMetric =
    value match {
      case 0 => modeldb.ModelRankMetric.Rmse
      case 1 => modeldb.ModelRankMetric.ExplainedVariance
      case 2 => modeldb.ModelRankMetric.R2
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownModelRankMetric(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): modeldb.ModelRankMetric =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownModelRankMetric(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[modeldb.ModelRankMetric] =
    value match {
      case 0 => _SomeRmse
      case 1 => _SomeExplainedVariance
      case 2 => _SomeR2
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[modeldb.ModelRankMetric] =
    name.toLowerCase match {
      case "rmse" => _SomeRmse
      case "explainedvariance" => _SomeExplainedVariance
      case "r2" => _SomeR2
      case _ => _root_.scala.None
    }

  lazy val list: List[modeldb.ModelRankMetric] = scala.List[modeldb.ModelRankMetric](
    modeldb.ModelRankMetric.Rmse,
    modeldb.ModelRankMetric.ExplainedVariance,
    modeldb.ModelRankMetric.R2
  )
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait ModelRankMetric extends ThriftEnum with Serializable