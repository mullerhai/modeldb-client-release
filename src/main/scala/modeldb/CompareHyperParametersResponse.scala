/**
 * Generated by Scrooge
 *   version: 18.10.0
 *   rev: dda071e1412b53f4bfdebc19e474f584e475d475
 *   built at: 20181018-174244
 */
package modeldb

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object CompareHyperParametersResponse extends ValidatingThriftStructCodec3[CompareHyperParametersResponse] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("CompareHyperParametersResponse")
  val Model1OnlyHyperparamsField: TField = new TField("model1OnlyHyperparams", TType.MAP, 1)
  val Model1OnlyHyperparamsFieldManifest: Manifest[Map[String, String]] = implicitly[Manifest[Map[String, String]]]
  val Model2OnlyHyperparamsField: TField = new TField("model2OnlyHyperparams", TType.MAP, 2)
  val Model2OnlyHyperparamsFieldManifest: Manifest[Map[String, String]] = implicitly[Manifest[Map[String, String]]]
  val SharedHyperparamsField: TField = new TField("sharedHyperparams", TType.MAP, 3)
  val SharedHyperparamsFieldManifest: Manifest[Map[String, modeldb.StringPair]] = implicitly[Manifest[Map[String, modeldb.StringPair]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      Model1OnlyHyperparamsField,
      false,
      false,
      Model1OnlyHyperparamsFieldManifest,
      _root_.scala.Some(implicitly[Manifest[String]]),
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      Model2OnlyHyperparamsField,
      false,
      false,
      Model2OnlyHyperparamsFieldManifest,
      _root_.scala.Some(implicitly[Manifest[String]]),
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      SharedHyperparamsField,
      false,
      false,
      SharedHyperparamsFieldManifest,
      _root_.scala.Some(implicitly[Manifest[String]]),
      _root_.scala.Some(implicitly[Manifest[modeldb.StringPair]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: CompareHyperParametersResponse): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: CompareHyperParametersResponse): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.model1OnlyHyperparams)
    buf ++= validateField(item.model2OnlyHyperparams)
    buf ++= validateField(item.sharedHyperparams)
    buf.toList
  }

  def withoutPassthroughFields(original: CompareHyperParametersResponse): CompareHyperParametersResponse =
    new Immutable(
      model1OnlyHyperparams =
        {
          val field = original.model1OnlyHyperparams
          field.map { case (key, value) =>
              val newKey = {
              val field = key
              field
            }
  
          
              val newValue = {
              val field = value
              field
            }
  
          
            newKey -> newValue
          }
        },
      model2OnlyHyperparams =
        {
          val field = original.model2OnlyHyperparams
          field.map { case (key, value) =>
              val newKey = {
              val field = key
              field
            }
  
          
              val newValue = {
              val field = value
              field
            }
  
          
            newKey -> newValue
          }
        },
      sharedHyperparams =
        {
          val field = original.sharedHyperparams
          field.map { case (key, value) =>
              val newKey = {
              val field = key
              field
            }
  
          
              val newValue = {
              val field = value
              modeldb.StringPair.withoutPassthroughFields(field)
            }
  
          
            newKey -> newValue
          }
        }
    )

  override def encode(_item: CompareHyperParametersResponse, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): CompareHyperParametersResponse = {

    var model1OnlyHyperparams: Map[String, String] = Map[String, String]()
    var model2OnlyHyperparams: Map[String, String] = Map[String, String]()
    var sharedHyperparams: Map[String, modeldb.StringPair] = Map[String, modeldb.StringPair]()

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.MAP =>
    
                model1OnlyHyperparams = readModel1OnlyHyperparamsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'model1OnlyHyperparams' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.MAP =>
    
                model2OnlyHyperparams = readModel2OnlyHyperparamsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'model2OnlyHyperparams' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.MAP =>
    
                sharedHyperparams = readSharedHyperparamsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'sharedHyperparams' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      model1OnlyHyperparams,
      model2OnlyHyperparams,
      sharedHyperparams,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): CompareHyperParametersResponse =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[modeldb] def eagerDecode(_iprot: TProtocol): CompareHyperParametersResponse = {
    var model1OnlyHyperparams: Map[String, String] = Map[String, String]()
    var model2OnlyHyperparams: Map[String, String] = Map[String, String]()
    var sharedHyperparams: Map[String, modeldb.StringPair] = Map[String, modeldb.StringPair]()
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.MAP =>
                model1OnlyHyperparams = readModel1OnlyHyperparamsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'model1OnlyHyperparams' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.MAP =>
                model2OnlyHyperparams = readModel2OnlyHyperparamsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'model2OnlyHyperparams' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.MAP =>
                sharedHyperparams = readSharedHyperparamsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'sharedHyperparams' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      model1OnlyHyperparams,
      model2OnlyHyperparams,
      sharedHyperparams,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    model1OnlyHyperparams: Map[String, String] = Map[String, String](),
    model2OnlyHyperparams: Map[String, String] = Map[String, String](),
    sharedHyperparams: Map[String, modeldb.StringPair] = Map[String, modeldb.StringPair]()
  ): CompareHyperParametersResponse =
    new Immutable(
      model1OnlyHyperparams,
      model2OnlyHyperparams,
      sharedHyperparams
    )

  def unapply(_item: CompareHyperParametersResponse): _root_.scala.Option[_root_.scala.Tuple3[Map[String, String], Map[String, String], Map[String, modeldb.StringPair]]] = _root_.scala.Some(_item.toTuple)


  @inline private[modeldb] def readModel1OnlyHyperparamsValue(_iprot: TProtocol): Map[String, String] = {
    val _map = _iprot.readMapBegin()
    if (_map.size == 0) {
      _iprot.readMapEnd()
      Map.empty[String, String]
    } else {
      val _rv = new mutable$HashMap[String, String]
      var _i = 0
      while (_i < _map.size) {
        val _key = {
          _iprot.readString()
        }
        val _value = {
          _iprot.readString()
        }
        _rv(_key) = _value
        _i += 1
      }
      _iprot.readMapEnd()
      _rv
    }
  }

  @inline private def writeModel1OnlyHyperparamsField(model1OnlyHyperparams_item: Map[String, String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(Model1OnlyHyperparamsField)
    writeModel1OnlyHyperparamsValue(model1OnlyHyperparams_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeModel1OnlyHyperparamsValue(model1OnlyHyperparams_item: Map[String, String], _oprot: TProtocol): Unit = {
    _oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, model1OnlyHyperparams_item.size))
    model1OnlyHyperparams_item.foreach { case (model1OnlyHyperparams_item_key, model1OnlyHyperparams_item_value) =>
      _oprot.writeString(model1OnlyHyperparams_item_key)
      _oprot.writeString(model1OnlyHyperparams_item_value)
    }
    _oprot.writeMapEnd()
  }

  @inline private[modeldb] def readModel2OnlyHyperparamsValue(_iprot: TProtocol): Map[String, String] = {
    val _map = _iprot.readMapBegin()
    if (_map.size == 0) {
      _iprot.readMapEnd()
      Map.empty[String, String]
    } else {
      val _rv = new mutable$HashMap[String, String]
      var _i = 0
      while (_i < _map.size) {
        val _key = {
          _iprot.readString()
        }
        val _value = {
          _iprot.readString()
        }
        _rv(_key) = _value
        _i += 1
      }
      _iprot.readMapEnd()
      _rv
    }
  }

  @inline private def writeModel2OnlyHyperparamsField(model2OnlyHyperparams_item: Map[String, String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(Model2OnlyHyperparamsField)
    writeModel2OnlyHyperparamsValue(model2OnlyHyperparams_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeModel2OnlyHyperparamsValue(model2OnlyHyperparams_item: Map[String, String], _oprot: TProtocol): Unit = {
    _oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, model2OnlyHyperparams_item.size))
    model2OnlyHyperparams_item.foreach { case (model2OnlyHyperparams_item_key, model2OnlyHyperparams_item_value) =>
      _oprot.writeString(model2OnlyHyperparams_item_key)
      _oprot.writeString(model2OnlyHyperparams_item_value)
    }
    _oprot.writeMapEnd()
  }

  @inline private[modeldb] def readSharedHyperparamsValue(_iprot: TProtocol): Map[String, modeldb.StringPair] = {
    val _map = _iprot.readMapBegin()
    if (_map.size == 0) {
      _iprot.readMapEnd()
      Map.empty[String, modeldb.StringPair]
    } else {
      val _rv = new mutable$HashMap[String, modeldb.StringPair]
      var _i = 0
      while (_i < _map.size) {
        val _key = {
          _iprot.readString()
        }
        val _value = {
          modeldb.StringPair.decode(_iprot)
        }
        _rv(_key) = _value
        _i += 1
      }
      _iprot.readMapEnd()
      _rv
    }
  }

  @inline private def writeSharedHyperparamsField(sharedHyperparams_item: Map[String, modeldb.StringPair], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SharedHyperparamsField)
    writeSharedHyperparamsValue(sharedHyperparams_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSharedHyperparamsValue(sharedHyperparams_item: Map[String, modeldb.StringPair], _oprot: TProtocol): Unit = {
    _oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, sharedHyperparams_item.size))
    sharedHyperparams_item.foreach { case (sharedHyperparams_item_key, sharedHyperparams_item_value) =>
      _oprot.writeString(sharedHyperparams_item_key)
      sharedHyperparams_item_value.write(_oprot)
    }
    _oprot.writeMapEnd()
  }


  object Immutable extends ThriftStructCodec3[CompareHyperParametersResponse] {
    override def encode(_item: CompareHyperParametersResponse, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): CompareHyperParametersResponse = CompareHyperParametersResponse.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[CompareHyperParametersResponse] = CompareHyperParametersResponse.metaData
  }

  /**
   * The default read-only implementation of CompareHyperParametersResponse.  You typically should not need to
   * directly reference this class; instead, use the CompareHyperParametersResponse.apply method to construct
   * new instances.
   */
  class Immutable(
      val model1OnlyHyperparams: Map[String, String],
      val model2OnlyHyperparams: Map[String, String],
      val sharedHyperparams: Map[String, modeldb.StringPair],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends CompareHyperParametersResponse {
    def this(
      model1OnlyHyperparams: Map[String, String] = Map[String, String](),
      model2OnlyHyperparams: Map[String, String] = Map[String, String](),
      sharedHyperparams: Map[String, modeldb.StringPair] = Map[String, modeldb.StringPair]()
    ) = this(
      model1OnlyHyperparams,
      model2OnlyHyperparams,
      sharedHyperparams,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val model1OnlyHyperparams: Map[String, String],
      val model2OnlyHyperparams: Map[String, String],
      val sharedHyperparams: Map[String, modeldb.StringPair],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends CompareHyperParametersResponse {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the CompareHyperParametersResponse trait with additional state or
   * behavior and implement the read-only methods from CompareHyperParametersResponse using an underlying
   * instance.
   */
  trait Proxy extends CompareHyperParametersResponse {
    protected def _underlying_CompareHyperParametersResponse: CompareHyperParametersResponse
    override def model1OnlyHyperparams: Map[String, String] = _underlying_CompareHyperParametersResponse.model1OnlyHyperparams
    override def model2OnlyHyperparams: Map[String, String] = _underlying_CompareHyperParametersResponse.model2OnlyHyperparams
    override def sharedHyperparams: Map[String, modeldb.StringPair] = _underlying_CompareHyperParametersResponse.sharedHyperparams
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_CompareHyperParametersResponse._passthroughFields
  }
}

/**
 * Prefer the companion object's [[modeldb.CompareHyperParametersResponse.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait CompareHyperParametersResponse
  extends ThriftStruct
  with _root_.scala.Product3[Map[String, String], Map[String, String], Map[String, modeldb.StringPair]]
  with ValidatingThriftStruct[CompareHyperParametersResponse]
  with java.io.Serializable
{
  import CompareHyperParametersResponse._

  def model1OnlyHyperparams: Map[String, String]
  def model2OnlyHyperparams: Map[String, String]
  def sharedHyperparams: Map[String, modeldb.StringPair]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: Map[String, String] = model1OnlyHyperparams
  def _2: Map[String, String] = model2OnlyHyperparams
  def _3: Map[String, modeldb.StringPair] = sharedHyperparams

  def toTuple: _root_.scala.Tuple3[Map[String, String], Map[String, String], Map[String, modeldb.StringPair]] = {
    (
      model1OnlyHyperparams,
      model2OnlyHyperparams,
      sharedHyperparams
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (model1OnlyHyperparams ne null) {
                writeModel1OnlyHyperparamsValue(model1OnlyHyperparams, _oprot)
                _root_.scala.Some(CompareHyperParametersResponse.Model1OnlyHyperparamsField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (model2OnlyHyperparams ne null) {
                writeModel2OnlyHyperparamsValue(model2OnlyHyperparams, _oprot)
                _root_.scala.Some(CompareHyperParametersResponse.Model2OnlyHyperparamsField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (sharedHyperparams ne null) {
                writeSharedHyperparamsValue(sharedHyperparams, _oprot)
                _root_.scala.Some(CompareHyperParametersResponse.SharedHyperparamsField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): CompareHyperParametersResponse = {
    var model1OnlyHyperparams: Map[String, String] = this.model1OnlyHyperparams
    var model2OnlyHyperparams: Map[String, String] = this.model2OnlyHyperparams
    var sharedHyperparams: Map[String, modeldb.StringPair] = this.sharedHyperparams
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        model1OnlyHyperparams = readModel1OnlyHyperparamsValue(_blob.read)
      case 2 =>
        model2OnlyHyperparams = readModel2OnlyHyperparamsValue(_blob.read)
      case 3 =>
        sharedHyperparams = readSharedHyperparamsValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      model1OnlyHyperparams,
      model2OnlyHyperparams,
      sharedHyperparams,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): CompareHyperParametersResponse = {
    var model1OnlyHyperparams: Map[String, String] = this.model1OnlyHyperparams
    var model2OnlyHyperparams: Map[String, String] = this.model2OnlyHyperparams
    var sharedHyperparams: Map[String, modeldb.StringPair] = this.sharedHyperparams

    _fieldId match {
      case 1 =>
        model1OnlyHyperparams = Map[String, String]()
      case 2 =>
        model2OnlyHyperparams = Map[String, String]()
      case 3 =>
        sharedHyperparams = Map[String, modeldb.StringPair]()
      case _ =>
    }
    new Immutable(
      model1OnlyHyperparams,
      model2OnlyHyperparams,
      sharedHyperparams,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetModel1OnlyHyperparams: CompareHyperParametersResponse = unsetField(1)

  def unsetModel2OnlyHyperparams: CompareHyperParametersResponse = unsetField(2)

  def unsetSharedHyperparams: CompareHyperParametersResponse = unsetField(3)


  override def write(_oprot: TProtocol): Unit = {
    CompareHyperParametersResponse.validate(this)
    _oprot.writeStructBegin(Struct)
    if (model1OnlyHyperparams ne null) writeModel1OnlyHyperparamsField(model1OnlyHyperparams, _oprot)
    if (model2OnlyHyperparams ne null) writeModel2OnlyHyperparamsField(model2OnlyHyperparams, _oprot)
    if (sharedHyperparams ne null) writeSharedHyperparamsField(sharedHyperparams, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    model1OnlyHyperparams: Map[String, String] = this.model1OnlyHyperparams,
    model2OnlyHyperparams: Map[String, String] = this.model2OnlyHyperparams,
    sharedHyperparams: Map[String, modeldb.StringPair] = this.sharedHyperparams,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): CompareHyperParametersResponse =
    new Immutable(
      model1OnlyHyperparams,
      model2OnlyHyperparams,
      sharedHyperparams,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[CompareHyperParametersResponse]

  private def _equals(x: CompareHyperParametersResponse, y: CompareHyperParametersResponse): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[CompareHyperParametersResponse])

  override def hashCode: Int = {
    var hash = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    hash
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 3

  override def productElement(n: Int): Any = n match {
    case 0 => this.model1OnlyHyperparams
    case 1 => this.model2OnlyHyperparams
    case 2 => this.sharedHyperparams
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "CompareHyperParametersResponse"

  def _codec: ValidatingThriftStructCodec3[CompareHyperParametersResponse] = CompareHyperParametersResponse
}

