/**
 * Generated by Scrooge
 *   version: 18.10.0
 *   rev: dda071e1412b53f4bfdebc19e474f584e475d475
 *   built at: 20181018-174244
 */
package modeldb

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object TransformEvent extends ValidatingThriftStructCodec3[TransformEvent] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TransformEvent")
  val OldDataFrameField: TField = new TField("oldDataFrame", TType.STRUCT, 1)
  val OldDataFrameFieldManifest: Manifest[modeldb.DataFrame] = implicitly[Manifest[modeldb.DataFrame]]
  val NewDataFrameField: TField = new TField("newDataFrame", TType.STRUCT, 2)
  val NewDataFrameFieldManifest: Manifest[modeldb.DataFrame] = implicitly[Manifest[modeldb.DataFrame]]
  val TransformerField: TField = new TField("transformer", TType.STRUCT, 3)
  val TransformerFieldManifest: Manifest[modeldb.Transformer] = implicitly[Manifest[modeldb.Transformer]]
  val InputColumnsField: TField = new TField("inputColumns", TType.LIST, 4)
  val InputColumnsFieldManifest: Manifest[Seq[String]] = implicitly[Manifest[Seq[String]]]
  val OutputColumnsField: TField = new TField("outputColumns", TType.LIST, 5)
  val OutputColumnsFieldManifest: Manifest[Seq[String]] = implicitly[Manifest[Seq[String]]]
  val ExperimentRunIdField: TField = new TField("experimentRunId", TType.I32, 6)
  val ExperimentRunIdFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      OldDataFrameField,
      false,
      false,
      OldDataFrameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      NewDataFrameField,
      false,
      false,
      NewDataFrameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      TransformerField,
      false,
      false,
      TransformerFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      InputColumnsField,
      false,
      false,
      InputColumnsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      OutputColumnsField,
      false,
      false,
      OutputColumnsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ExperimentRunIdField,
      false,
      false,
      ExperimentRunIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TransformEvent): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TransformEvent): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.oldDataFrame)
    buf ++= validateField(item.newDataFrame)
    buf ++= validateField(item.transformer)
    buf ++= validateField(item.inputColumns)
    buf ++= validateField(item.outputColumns)
    buf ++= validateField(item.experimentRunId)
    buf.toList
  }

  def withoutPassthroughFields(original: TransformEvent): TransformEvent =
    new Immutable(
      oldDataFrame =
        {
          val field = original.oldDataFrame
          modeldb.DataFrame.withoutPassthroughFields(field)
        },
      newDataFrame =
        {
          val field = original.newDataFrame
          modeldb.DataFrame.withoutPassthroughFields(field)
        },
      transformer =
        {
          val field = original.transformer
          modeldb.Transformer.withoutPassthroughFields(field)
        },
      inputColumns =
        {
          val field = original.inputColumns
          field.map { field =>
            field
          }
        },
      outputColumns =
        {
          val field = original.outputColumns
          field.map { field =>
            field
          }
        },
      experimentRunId =
        {
          val field = original.experimentRunId
          field
        }
    )

  override def encode(_item: TransformEvent, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TransformEvent = {

    var oldDataFrame: modeldb.DataFrame = null
    var newDataFrame: modeldb.DataFrame = null
    var transformer: modeldb.Transformer = null
    var inputColumns: Seq[String] = Seq[String]()
    var outputColumns: Seq[String] = Seq[String]()
    var experimentRunId: Int = 0

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                oldDataFrame = readOldDataFrameValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'oldDataFrame' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                newDataFrame = readNewDataFrameValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'newDataFrame' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                transformer = readTransformerValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'transformer' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.LIST =>
    
                inputColumns = readInputColumnsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'inputColumns' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.LIST =>
    
                outputColumns = readOutputColumnsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'outputColumns' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.I32 =>
    
                experimentRunId = readExperimentRunIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'experimentRunId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      oldDataFrame,
      newDataFrame,
      transformer,
      inputColumns,
      outputColumns,
      experimentRunId,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TransformEvent =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[modeldb] def eagerDecode(_iprot: TProtocol): TransformEvent = {
    var oldDataFrame: modeldb.DataFrame = null
    var newDataFrame: modeldb.DataFrame = null
    var transformer: modeldb.Transformer = null
    var inputColumns: Seq[String] = Seq[String]()
    var outputColumns: Seq[String] = Seq[String]()
    var experimentRunId: Int = 0
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
                oldDataFrame = readOldDataFrameValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'oldDataFrame' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRUCT =>
                newDataFrame = readNewDataFrameValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'newDataFrame' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRUCT =>
                transformer = readTransformerValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'transformer' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.LIST =>
                inputColumns = readInputColumnsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'inputColumns' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.LIST =>
                outputColumns = readOutputColumnsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'outputColumns' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.I32 =>
                experimentRunId = readExperimentRunIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'experimentRunId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      oldDataFrame,
      newDataFrame,
      transformer,
      inputColumns,
      outputColumns,
      experimentRunId,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    oldDataFrame: modeldb.DataFrame,
    newDataFrame: modeldb.DataFrame,
    transformer: modeldb.Transformer,
    inputColumns: Seq[String] = Seq[String](),
    outputColumns: Seq[String] = Seq[String](),
    experimentRunId: Int
  ): TransformEvent =
    new Immutable(
      oldDataFrame,
      newDataFrame,
      transformer,
      inputColumns,
      outputColumns,
      experimentRunId
    )

  def unapply(_item: TransformEvent): _root_.scala.Option[_root_.scala.Tuple6[modeldb.DataFrame, modeldb.DataFrame, modeldb.Transformer, Seq[String], Seq[String], Int]] = _root_.scala.Some(_item.toTuple)


  @inline private[modeldb] def readOldDataFrameValue(_iprot: TProtocol): modeldb.DataFrame = {
    modeldb.DataFrame.decode(_iprot)
  }

  @inline private def writeOldDataFrameField(oldDataFrame_item: modeldb.DataFrame, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(OldDataFrameField)
    writeOldDataFrameValue(oldDataFrame_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeOldDataFrameValue(oldDataFrame_item: modeldb.DataFrame, _oprot: TProtocol): Unit = {
    oldDataFrame_item.write(_oprot)
  }

  @inline private[modeldb] def readNewDataFrameValue(_iprot: TProtocol): modeldb.DataFrame = {
    modeldb.DataFrame.decode(_iprot)
  }

  @inline private def writeNewDataFrameField(newDataFrame_item: modeldb.DataFrame, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NewDataFrameField)
    writeNewDataFrameValue(newDataFrame_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNewDataFrameValue(newDataFrame_item: modeldb.DataFrame, _oprot: TProtocol): Unit = {
    newDataFrame_item.write(_oprot)
  }

  @inline private[modeldb] def readTransformerValue(_iprot: TProtocol): modeldb.Transformer = {
    modeldb.Transformer.decode(_iprot)
  }

  @inline private def writeTransformerField(transformer_item: modeldb.Transformer, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TransformerField)
    writeTransformerValue(transformer_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTransformerValue(transformer_item: modeldb.Transformer, _oprot: TProtocol): Unit = {
    transformer_item.write(_oprot)
  }

  @inline private[modeldb] def readInputColumnsValue(_iprot: TProtocol): Seq[String] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[String](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          _iprot.readString()
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeInputColumnsField(inputColumns_item: Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(InputColumnsField)
    writeInputColumnsValue(inputColumns_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeInputColumnsValue(inputColumns_item: Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRING, inputColumns_item.size))
    inputColumns_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = inputColumns_item.size
        while (_i < _size) {
          val inputColumns_item_element = inputColumns_item(_i)
          _oprot.writeString(inputColumns_item_element)
          _i += 1
        }
      case _ =>
        inputColumns_item.foreach { inputColumns_item_element =>
          _oprot.writeString(inputColumns_item_element)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[modeldb] def readOutputColumnsValue(_iprot: TProtocol): Seq[String] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[String](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          _iprot.readString()
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeOutputColumnsField(outputColumns_item: Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(OutputColumnsField)
    writeOutputColumnsValue(outputColumns_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeOutputColumnsValue(outputColumns_item: Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRING, outputColumns_item.size))
    outputColumns_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = outputColumns_item.size
        while (_i < _size) {
          val outputColumns_item_element = outputColumns_item(_i)
          _oprot.writeString(outputColumns_item_element)
          _i += 1
        }
      case _ =>
        outputColumns_item.foreach { outputColumns_item_element =>
          _oprot.writeString(outputColumns_item_element)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[modeldb] def readExperimentRunIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeExperimentRunIdField(experimentRunId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ExperimentRunIdField)
    writeExperimentRunIdValue(experimentRunId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeExperimentRunIdValue(experimentRunId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(experimentRunId_item)
  }


  object Immutable extends ThriftStructCodec3[TransformEvent] {
    override def encode(_item: TransformEvent, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TransformEvent = TransformEvent.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TransformEvent] = TransformEvent.metaData
  }

  /**
   * The default read-only implementation of TransformEvent.  You typically should not need to
   * directly reference this class; instead, use the TransformEvent.apply method to construct
   * new instances.
   */
  class Immutable(
      val oldDataFrame: modeldb.DataFrame,
      val newDataFrame: modeldb.DataFrame,
      val transformer: modeldb.Transformer,
      val inputColumns: Seq[String],
      val outputColumns: Seq[String],
      val experimentRunId: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TransformEvent {
    def this(
      oldDataFrame: modeldb.DataFrame,
      newDataFrame: modeldb.DataFrame,
      transformer: modeldb.Transformer,
      inputColumns: Seq[String] = Seq[String](),
      outputColumns: Seq[String] = Seq[String](),
      experimentRunId: Int
    ) = this(
      oldDataFrame,
      newDataFrame,
      transformer,
      inputColumns,
      outputColumns,
      experimentRunId,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val oldDataFrame: modeldb.DataFrame,
      val newDataFrame: modeldb.DataFrame,
      val transformer: modeldb.Transformer,
      val inputColumns: Seq[String],
      val outputColumns: Seq[String],
      val experimentRunId: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TransformEvent {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TransformEvent trait with additional state or
   * behavior and implement the read-only methods from TransformEvent using an underlying
   * instance.
   */
  trait Proxy extends TransformEvent {
    protected def _underlying_TransformEvent: TransformEvent
    override def oldDataFrame: modeldb.DataFrame = _underlying_TransformEvent.oldDataFrame
    override def newDataFrame: modeldb.DataFrame = _underlying_TransformEvent.newDataFrame
    override def transformer: modeldb.Transformer = _underlying_TransformEvent.transformer
    override def inputColumns: Seq[String] = _underlying_TransformEvent.inputColumns
    override def outputColumns: Seq[String] = _underlying_TransformEvent.outputColumns
    override def experimentRunId: Int = _underlying_TransformEvent.experimentRunId
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TransformEvent._passthroughFields
  }
}

/**
 * Prefer the companion object's [[modeldb.TransformEvent.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TransformEvent
  extends ThriftStruct
  with _root_.scala.Product6[modeldb.DataFrame, modeldb.DataFrame, modeldb.Transformer, Seq[String], Seq[String], Int]
  with ValidatingThriftStruct[TransformEvent]
  with java.io.Serializable
{
  import TransformEvent._

  def oldDataFrame: modeldb.DataFrame
  def newDataFrame: modeldb.DataFrame
  def transformer: modeldb.Transformer
  def inputColumns: Seq[String]
  def outputColumns: Seq[String]
  def experimentRunId: Int

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: modeldb.DataFrame = oldDataFrame
  def _2: modeldb.DataFrame = newDataFrame
  def _3: modeldb.Transformer = transformer
  def _4: Seq[String] = inputColumns
  def _5: Seq[String] = outputColumns
  def _6: Int = experimentRunId

  def toTuple: _root_.scala.Tuple6[modeldb.DataFrame, modeldb.DataFrame, modeldb.Transformer, Seq[String], Seq[String], Int] = {
    (
      oldDataFrame,
      newDataFrame,
      transformer,
      inputColumns,
      outputColumns,
      experimentRunId
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (oldDataFrame ne null) {
                writeOldDataFrameValue(oldDataFrame, _oprot)
                _root_.scala.Some(TransformEvent.OldDataFrameField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (newDataFrame ne null) {
                writeNewDataFrameValue(newDataFrame, _oprot)
                _root_.scala.Some(TransformEvent.NewDataFrameField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (transformer ne null) {
                writeTransformerValue(transformer, _oprot)
                _root_.scala.Some(TransformEvent.TransformerField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (inputColumns ne null) {
                writeInputColumnsValue(inputColumns, _oprot)
                _root_.scala.Some(TransformEvent.InputColumnsField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (outputColumns ne null) {
                writeOutputColumnsValue(outputColumns, _oprot)
                _root_.scala.Some(TransformEvent.OutputColumnsField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (true) {
                writeExperimentRunIdValue(experimentRunId, _oprot)
                _root_.scala.Some(TransformEvent.ExperimentRunIdField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TransformEvent = {
    var oldDataFrame: modeldb.DataFrame = this.oldDataFrame
    var newDataFrame: modeldb.DataFrame = this.newDataFrame
    var transformer: modeldb.Transformer = this.transformer
    var inputColumns: Seq[String] = this.inputColumns
    var outputColumns: Seq[String] = this.outputColumns
    var experimentRunId: Int = this.experimentRunId
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        oldDataFrame = readOldDataFrameValue(_blob.read)
      case 2 =>
        newDataFrame = readNewDataFrameValue(_blob.read)
      case 3 =>
        transformer = readTransformerValue(_blob.read)
      case 4 =>
        inputColumns = readInputColumnsValue(_blob.read)
      case 5 =>
        outputColumns = readOutputColumnsValue(_blob.read)
      case 6 =>
        experimentRunId = readExperimentRunIdValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      oldDataFrame,
      newDataFrame,
      transformer,
      inputColumns,
      outputColumns,
      experimentRunId,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TransformEvent = {
    var oldDataFrame: modeldb.DataFrame = this.oldDataFrame
    var newDataFrame: modeldb.DataFrame = this.newDataFrame
    var transformer: modeldb.Transformer = this.transformer
    var inputColumns: Seq[String] = this.inputColumns
    var outputColumns: Seq[String] = this.outputColumns
    var experimentRunId: Int = this.experimentRunId

    _fieldId match {
      case 1 =>
        oldDataFrame = null
      case 2 =>
        newDataFrame = null
      case 3 =>
        transformer = null
      case 4 =>
        inputColumns = Seq[String]()
      case 5 =>
        outputColumns = Seq[String]()
      case 6 =>
        experimentRunId = 0
      case _ =>
    }
    new Immutable(
      oldDataFrame,
      newDataFrame,
      transformer,
      inputColumns,
      outputColumns,
      experimentRunId,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetOldDataFrame: TransformEvent = unsetField(1)

  def unsetNewDataFrame: TransformEvent = unsetField(2)

  def unsetTransformer: TransformEvent = unsetField(3)

  def unsetInputColumns: TransformEvent = unsetField(4)

  def unsetOutputColumns: TransformEvent = unsetField(5)

  def unsetExperimentRunId: TransformEvent = unsetField(6)


  override def write(_oprot: TProtocol): Unit = {
    TransformEvent.validate(this)
    _oprot.writeStructBegin(Struct)
    if (oldDataFrame ne null) writeOldDataFrameField(oldDataFrame, _oprot)
    if (newDataFrame ne null) writeNewDataFrameField(newDataFrame, _oprot)
    if (transformer ne null) writeTransformerField(transformer, _oprot)
    if (inputColumns ne null) writeInputColumnsField(inputColumns, _oprot)
    if (outputColumns ne null) writeOutputColumnsField(outputColumns, _oprot)
    writeExperimentRunIdField(experimentRunId, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    oldDataFrame: modeldb.DataFrame = this.oldDataFrame,
    newDataFrame: modeldb.DataFrame = this.newDataFrame,
    transformer: modeldb.Transformer = this.transformer,
    inputColumns: Seq[String] = this.inputColumns,
    outputColumns: Seq[String] = this.outputColumns,
    experimentRunId: Int = this.experimentRunId,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TransformEvent =
    new Immutable(
      oldDataFrame,
      newDataFrame,
      transformer,
      inputColumns,
      outputColumns,
      experimentRunId,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TransformEvent]

  private def _equals(x: TransformEvent, y: TransformEvent): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TransformEvent])

  override def hashCode: Int = {
    var hash = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    hash
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 6

  override def productElement(n: Int): Any = n match {
    case 0 => this.oldDataFrame
    case 1 => this.newDataFrame
    case 2 => this.transformer
    case 3 => this.inputColumns
    case 4 => this.outputColumns
    case 5 => this.experimentRunId
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TransformEvent"

  def _codec: ValidatingThriftStructCodec3[TransformEvent] = TransformEvent
}

