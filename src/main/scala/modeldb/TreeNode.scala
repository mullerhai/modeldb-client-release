/**
 * Generated by Scrooge
 *   version: 18.10.0
 *   rev: dda071e1412b53f4bfdebc19e474f584e475d475
 *   built at: 20181018-174244
 */
package modeldb

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object TreeNode extends ValidatingThriftStructCodec3[TreeNode] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TreeNode")
  val PredictionField: TField = new TField("prediction", TType.DOUBLE, 1)
  val PredictionFieldManifest: Manifest[Double] = implicitly[Manifest[Double]]
  val ImpurityField: TField = new TField("impurity", TType.DOUBLE, 2)
  val ImpurityFieldManifest: Manifest[Double] = implicitly[Manifest[Double]]
  val GainField: TField = new TField("gain", TType.DOUBLE, 3)
  val GainFieldManifest: Manifest[Double] = implicitly[Manifest[Double]]
  val SplitIndexField: TField = new TField("splitIndex", TType.I32, 4)
  val SplitIndexFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      PredictionField,
      false,
      false,
      PredictionFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ImpurityField,
      false,
      false,
      ImpurityFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      GainField,
      true,
      false,
      GainFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      SplitIndexField,
      true,
      false,
      SplitIndexFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TreeNode): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TreeNode): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.prediction)
    buf ++= validateField(item.impurity)
    buf ++= validateField(item.gain)
    buf ++= validateField(item.splitIndex)
    buf.toList
  }

  def withoutPassthroughFields(original: TreeNode): TreeNode =
    new Immutable(
      prediction =
        {
          val field = original.prediction
          field
        },
      impurity =
        {
          val field = original.impurity
          field
        },
      gain =
        {
          val field = original.gain
          field.map { field =>
            field
          }
        },
      splitIndex =
        {
          val field = original.splitIndex
          field.map { field =>
            field
          }
        }
    )

  override def encode(_item: TreeNode, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TreeNode = {

    var prediction: Double = 0.0
    var impurity: Double = 0.0
    var gainOffset: Int = -1
    var splitIndexOffset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.DOUBLE =>
    
                prediction = readPredictionValue(_iprot)
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'prediction' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.DOUBLE =>
    
                impurity = readImpurityValue(_iprot)
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'impurity' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.DOUBLE =>
                gainOffset = _iprot.offsetSkipDouble
    
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'gain' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 =>
                splitIndexOffset = _iprot.offsetSkipI32
    
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'splitIndex' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      prediction,
      impurity,
      gainOffset,
      splitIndexOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TreeNode =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[modeldb] def eagerDecode(_iprot: TProtocol): TreeNode = {
    var prediction: Double = 0.0
    var impurity: Double = 0.0
    var gain: _root_.scala.Option[Double] = _root_.scala.None
    var splitIndex: _root_.scala.Option[Int] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.DOUBLE =>
                prediction = readPredictionValue(_iprot)
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'prediction' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.DOUBLE =>
                impurity = readImpurityValue(_iprot)
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'impurity' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.DOUBLE =>
                gain = _root_.scala.Some(readGainValue(_iprot))
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'gain' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 =>
                splitIndex = _root_.scala.Some(readSplitIndexValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'splitIndex' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      prediction,
      impurity,
      gain,
      splitIndex,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    prediction: Double,
    impurity: Double,
    gain: _root_.scala.Option[Double] = _root_.scala.None,
    splitIndex: _root_.scala.Option[Int] = _root_.scala.None
  ): TreeNode =
    new Immutable(
      prediction,
      impurity,
      gain,
      splitIndex
    )

  def unapply(_item: TreeNode): _root_.scala.Option[_root_.scala.Tuple4[Double, Double, Option[Double], Option[Int]]] = _root_.scala.Some(_item.toTuple)


  @inline private[modeldb] def readPredictionValue(_iprot: TProtocol): Double = {
    _iprot.readDouble()
  }

  @inline private def writePredictionField(prediction_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PredictionField)
    writePredictionValue(prediction_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePredictionValue(prediction_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeDouble(prediction_item)
  }

  @inline private[modeldb] def readImpurityValue(_iprot: TProtocol): Double = {
    _iprot.readDouble()
  }

  @inline private def writeImpurityField(impurity_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ImpurityField)
    writeImpurityValue(impurity_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeImpurityValue(impurity_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeDouble(impurity_item)
  }

  @inline private[modeldb] def readGainValue(_iprot: TProtocol): Double = {
    _iprot.readDouble()
  }

  @inline private def writeGainField(gain_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(GainField)
    writeGainValue(gain_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeGainValue(gain_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeDouble(gain_item)
  }

  @inline private[modeldb] def readSplitIndexValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeSplitIndexField(splitIndex_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SplitIndexField)
    writeSplitIndexValue(splitIndex_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSplitIndexValue(splitIndex_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(splitIndex_item)
  }


  object Immutable extends ThriftStructCodec3[TreeNode] {
    override def encode(_item: TreeNode, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TreeNode = TreeNode.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TreeNode] = TreeNode.metaData
  }

  /**
   * The default read-only implementation of TreeNode.  You typically should not need to
   * directly reference this class; instead, use the TreeNode.apply method to construct
   * new instances.
   */
  class Immutable(
      val prediction: Double,
      val impurity: Double,
      val gain: _root_.scala.Option[Double],
      val splitIndex: _root_.scala.Option[Int],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TreeNode {
    def this(
      prediction: Double,
      impurity: Double,
      gain: _root_.scala.Option[Double] = _root_.scala.None,
      splitIndex: _root_.scala.Option[Int] = _root_.scala.None
    ) = this(
      prediction,
      impurity,
      gain,
      splitIndex,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val prediction: Double,
      val impurity: Double,
      gainOffset: Int,
      splitIndexOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TreeNode {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val gain: _root_.scala.Option[Double] =
      if (gainOffset == -1)
        None
      else {
        Some(_proto.decodeDouble(_buf, gainOffset))
      }
    lazy val splitIndex: _root_.scala.Option[Int] =
      if (splitIndexOffset == -1)
        None
      else {
        Some(_proto.decodeI32(_buf, splitIndexOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TreeNode trait with additional state or
   * behavior and implement the read-only methods from TreeNode using an underlying
   * instance.
   */
  trait Proxy extends TreeNode {
    protected def _underlying_TreeNode: TreeNode
    override def prediction: Double = _underlying_TreeNode.prediction
    override def impurity: Double = _underlying_TreeNode.impurity
    override def gain: _root_.scala.Option[Double] = _underlying_TreeNode.gain
    override def splitIndex: _root_.scala.Option[Int] = _underlying_TreeNode.splitIndex
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TreeNode._passthroughFields
  }
}

/**
 * Prefer the companion object's [[modeldb.TreeNode.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TreeNode
  extends ThriftStruct
  with _root_.scala.Product4[Double, Double, Option[Double], Option[Int]]
  with ValidatingThriftStruct[TreeNode]
  with java.io.Serializable
{
  import TreeNode._

  def prediction: Double
  def impurity: Double
  def gain: _root_.scala.Option[Double]
  def splitIndex: _root_.scala.Option[Int]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: Double = prediction
  def _2: Double = impurity
  def _3: _root_.scala.Option[Double] = gain
  def _4: _root_.scala.Option[Int] = splitIndex

  def toTuple: _root_.scala.Tuple4[Double, Double, Option[Double], Option[Int]] = {
    (
      prediction,
      impurity,
      gain,
      splitIndex
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writePredictionValue(prediction, _oprot)
                _root_.scala.Some(TreeNode.PredictionField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (true) {
                writeImpurityValue(impurity, _oprot)
                _root_.scala.Some(TreeNode.ImpurityField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (gain.isDefined) {
                writeGainValue(gain.get, _oprot)
                _root_.scala.Some(TreeNode.GainField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (splitIndex.isDefined) {
                writeSplitIndexValue(splitIndex.get, _oprot)
                _root_.scala.Some(TreeNode.SplitIndexField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TreeNode = {
    var prediction: Double = this.prediction
    var impurity: Double = this.impurity
    var gain: _root_.scala.Option[Double] = this.gain
    var splitIndex: _root_.scala.Option[Int] = this.splitIndex
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        prediction = readPredictionValue(_blob.read)
      case 2 =>
        impurity = readImpurityValue(_blob.read)
      case 3 =>
        gain = _root_.scala.Some(readGainValue(_blob.read))
      case 4 =>
        splitIndex = _root_.scala.Some(readSplitIndexValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      prediction,
      impurity,
      gain,
      splitIndex,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TreeNode = {
    var prediction: Double = this.prediction
    var impurity: Double = this.impurity
    var gain: _root_.scala.Option[Double] = this.gain
    var splitIndex: _root_.scala.Option[Int] = this.splitIndex

    _fieldId match {
      case 1 =>
        prediction = 0.0
      case 2 =>
        impurity = 0.0
      case 3 =>
        gain = _root_.scala.None
      case 4 =>
        splitIndex = _root_.scala.None
      case _ =>
    }
    new Immutable(
      prediction,
      impurity,
      gain,
      splitIndex,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetPrediction: TreeNode = unsetField(1)

  def unsetImpurity: TreeNode = unsetField(2)

  def unsetGain: TreeNode = unsetField(3)

  def unsetSplitIndex: TreeNode = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    TreeNode.validate(this)
    _oprot.writeStructBegin(Struct)
    writePredictionField(prediction, _oprot)
    writeImpurityField(impurity, _oprot)
    if (gain.isDefined) writeGainField(gain.get, _oprot)
    if (splitIndex.isDefined) writeSplitIndexField(splitIndex.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    prediction: Double = this.prediction,
    impurity: Double = this.impurity,
    gain: _root_.scala.Option[Double] = this.gain,
    splitIndex: _root_.scala.Option[Int] = this.splitIndex,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TreeNode =
    new Immutable(
      prediction,
      impurity,
      gain,
      splitIndex,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TreeNode]

  private def _equals(x: TreeNode, y: TreeNode): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TreeNode])

  override def hashCode: Int = {
    var hash = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    hash
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.prediction
    case 1 => this.impurity
    case 2 => this.gain
    case 3 => this.splitIndex
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TreeNode"

  def _codec: ValidatingThriftStructCodec3[TreeNode] = TreeNode
}

