/**
 * Generated by Scrooge
 *   version: 18.10.0
 *   rev: dda071e1412b53f4bfdebc19e474f584e475d475
 *   built at: 20181018-174244
 */
package modeldb

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object AnnotationFragment extends ValidatingThriftStructCodec3[AnnotationFragment] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("AnnotationFragment")
  val TypeField: TField = new TField("type", TType.STRING, 1)
  val TypeFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val DfField: TField = new TField("df", TType.STRUCT, 2)
  val DfFieldManifest: Manifest[modeldb.DataFrame] = implicitly[Manifest[modeldb.DataFrame]]
  val SpecField: TField = new TField("spec", TType.STRUCT, 3)
  val SpecFieldManifest: Manifest[modeldb.TransformerSpec] = implicitly[Manifest[modeldb.TransformerSpec]]
  val TransformerField: TField = new TField("transformer", TType.STRUCT, 4)
  val TransformerFieldManifest: Manifest[modeldb.Transformer] = implicitly[Manifest[modeldb.Transformer]]
  val MessageField: TField = new TField("message", TType.STRING, 5)
  val MessageFieldManifest: Manifest[String] = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      TypeField,
      false,
      false,
      TypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      DfField,
      false,
      false,
      DfFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      SpecField,
      false,
      false,
      SpecFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      TransformerField,
      false,
      false,
      TransformerFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      MessageField,
      false,
      false,
      MessageFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: AnnotationFragment): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: AnnotationFragment): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.`type`)
    buf ++= validateField(item.df)
    buf ++= validateField(item.spec)
    buf ++= validateField(item.transformer)
    buf ++= validateField(item.message)
    buf.toList
  }

  def withoutPassthroughFields(original: AnnotationFragment): AnnotationFragment =
    new Immutable(
      `type` =
        {
          val field = original.`type`
          field
        },
      df =
        {
          val field = original.df
          modeldb.DataFrame.withoutPassthroughFields(field)
        },
      spec =
        {
          val field = original.spec
          modeldb.TransformerSpec.withoutPassthroughFields(field)
        },
      transformer =
        {
          val field = original.transformer
          modeldb.Transformer.withoutPassthroughFields(field)
        },
      message =
        {
          val field = original.message
          field
        }
    )

  override def encode(_item: AnnotationFragment, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): AnnotationFragment = {

    var typeOffset: Int = -1
    var df: modeldb.DataFrame = null
    var spec: modeldb.TransformerSpec = null
    var transformer: modeldb.Transformer = null
    var messageOffset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                typeOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field '`type`' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                df = readDfValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'df' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                spec = readSpecValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'spec' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                transformer = readTransformerValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'transformer' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                messageOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'message' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      typeOffset,
      df,
      spec,
      transformer,
      messageOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): AnnotationFragment =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[modeldb] def eagerDecode(_iprot: TProtocol): AnnotationFragment = {
    var `type`: String = null
    var df: modeldb.DataFrame = null
    var spec: modeldb.TransformerSpec = null
    var transformer: modeldb.Transformer = null
    var message: String = null
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                `type` = readTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field '`type`' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRUCT =>
                df = readDfValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'df' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRUCT =>
                spec = readSpecValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'spec' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRUCT =>
                transformer = readTransformerValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'transformer' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                message = readMessageValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'message' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      `type`,
      df,
      spec,
      transformer,
      message,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    `type`: String,
    df: modeldb.DataFrame,
    spec: modeldb.TransformerSpec,
    transformer: modeldb.Transformer,
    message: String
  ): AnnotationFragment =
    new Immutable(
      `type`,
      df,
      spec,
      transformer,
      message
    )

  def unapply(_item: AnnotationFragment): _root_.scala.Option[_root_.scala.Tuple5[String, modeldb.DataFrame, modeldb.TransformerSpec, modeldb.Transformer, String]] = _root_.scala.Some(_item.toTuple)


  @inline private[modeldb] def readTypeValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeTypeField(type_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TypeField)
    writeTypeValue(type_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTypeValue(type_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(type_item)
  }

  @inline private[modeldb] def readDfValue(_iprot: TProtocol): modeldb.DataFrame = {
    modeldb.DataFrame.decode(_iprot)
  }

  @inline private def writeDfField(df_item: modeldb.DataFrame, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DfField)
    writeDfValue(df_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDfValue(df_item: modeldb.DataFrame, _oprot: TProtocol): Unit = {
    df_item.write(_oprot)
  }

  @inline private[modeldb] def readSpecValue(_iprot: TProtocol): modeldb.TransformerSpec = {
    modeldb.TransformerSpec.decode(_iprot)
  }

  @inline private def writeSpecField(spec_item: modeldb.TransformerSpec, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SpecField)
    writeSpecValue(spec_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSpecValue(spec_item: modeldb.TransformerSpec, _oprot: TProtocol): Unit = {
    spec_item.write(_oprot)
  }

  @inline private[modeldb] def readTransformerValue(_iprot: TProtocol): modeldb.Transformer = {
    modeldb.Transformer.decode(_iprot)
  }

  @inline private def writeTransformerField(transformer_item: modeldb.Transformer, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TransformerField)
    writeTransformerValue(transformer_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTransformerValue(transformer_item: modeldb.Transformer, _oprot: TProtocol): Unit = {
    transformer_item.write(_oprot)
  }

  @inline private[modeldb] def readMessageValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeMessageField(message_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MessageField)
    writeMessageValue(message_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMessageValue(message_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(message_item)
  }


  object Immutable extends ThriftStructCodec3[AnnotationFragment] {
    override def encode(_item: AnnotationFragment, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): AnnotationFragment = AnnotationFragment.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[AnnotationFragment] = AnnotationFragment.metaData
  }

  /**
   * The default read-only implementation of AnnotationFragment.  You typically should not need to
   * directly reference this class; instead, use the AnnotationFragment.apply method to construct
   * new instances.
   */
  class Immutable(
      val `type`: String,
      val df: modeldb.DataFrame,
      val spec: modeldb.TransformerSpec,
      val transformer: modeldb.Transformer,
      val message: String,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends AnnotationFragment {
    def this(
      `type`: String,
      df: modeldb.DataFrame,
      spec: modeldb.TransformerSpec,
      transformer: modeldb.Transformer,
      message: String
    ) = this(
      `type`,
      df,
      spec,
      transformer,
      message,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      typeOffset: Int,
      val df: modeldb.DataFrame,
      val spec: modeldb.TransformerSpec,
      val transformer: modeldb.Transformer,
      messageOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends AnnotationFragment {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val `type`: String =
      if (typeOffset == -1)
        null
      else {
        _proto.decodeString(_buf, typeOffset)
      }
    lazy val message: String =
      if (messageOffset == -1)
        null
      else {
        _proto.decodeString(_buf, messageOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the AnnotationFragment trait with additional state or
   * behavior and implement the read-only methods from AnnotationFragment using an underlying
   * instance.
   */
  trait Proxy extends AnnotationFragment {
    protected def _underlying_AnnotationFragment: AnnotationFragment
    override def `type`: String = _underlying_AnnotationFragment.`type`
    override def df: modeldb.DataFrame = _underlying_AnnotationFragment.df
    override def spec: modeldb.TransformerSpec = _underlying_AnnotationFragment.spec
    override def transformer: modeldb.Transformer = _underlying_AnnotationFragment.transformer
    override def message: String = _underlying_AnnotationFragment.message
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_AnnotationFragment._passthroughFields
  }
}

/**
 * Prefer the companion object's [[modeldb.AnnotationFragment.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait AnnotationFragment
  extends ThriftStruct
  with _root_.scala.Product5[String, modeldb.DataFrame, modeldb.TransformerSpec, modeldb.Transformer, String]
  with ValidatingThriftStruct[AnnotationFragment]
  with java.io.Serializable
{
  import AnnotationFragment._

  def `type`: String
  def df: modeldb.DataFrame
  def spec: modeldb.TransformerSpec
  def transformer: modeldb.Transformer
  def message: String

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: String = `type`
  def _2: modeldb.DataFrame = df
  def _3: modeldb.TransformerSpec = spec
  def _4: modeldb.Transformer = transformer
  def _5: String = message

  def toTuple: _root_.scala.Tuple5[String, modeldb.DataFrame, modeldb.TransformerSpec, modeldb.Transformer, String] = {
    (
      `type`,
      df,
      spec,
      transformer,
      message
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (`type` ne null) {
                writeTypeValue(`type`, _oprot)
                _root_.scala.Some(AnnotationFragment.TypeField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (df ne null) {
                writeDfValue(df, _oprot)
                _root_.scala.Some(AnnotationFragment.DfField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (spec ne null) {
                writeSpecValue(spec, _oprot)
                _root_.scala.Some(AnnotationFragment.SpecField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (transformer ne null) {
                writeTransformerValue(transformer, _oprot)
                _root_.scala.Some(AnnotationFragment.TransformerField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (message ne null) {
                writeMessageValue(message, _oprot)
                _root_.scala.Some(AnnotationFragment.MessageField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): AnnotationFragment = {
    var `type`: String = this.`type`
    var df: modeldb.DataFrame = this.df
    var spec: modeldb.TransformerSpec = this.spec
    var transformer: modeldb.Transformer = this.transformer
    var message: String = this.message
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        `type` = readTypeValue(_blob.read)
      case 2 =>
        df = readDfValue(_blob.read)
      case 3 =>
        spec = readSpecValue(_blob.read)
      case 4 =>
        transformer = readTransformerValue(_blob.read)
      case 5 =>
        message = readMessageValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      `type`,
      df,
      spec,
      transformer,
      message,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): AnnotationFragment = {
    var `type`: String = this.`type`
    var df: modeldb.DataFrame = this.df
    var spec: modeldb.TransformerSpec = this.spec
    var transformer: modeldb.Transformer = this.transformer
    var message: String = this.message

    _fieldId match {
      case 1 =>
        `type` = null
      case 2 =>
        df = null
      case 3 =>
        spec = null
      case 4 =>
        transformer = null
      case 5 =>
        message = null
      case _ =>
    }
    new Immutable(
      `type`,
      df,
      spec,
      transformer,
      message,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetType: AnnotationFragment = unsetField(1)

  def unsetDf: AnnotationFragment = unsetField(2)

  def unsetSpec: AnnotationFragment = unsetField(3)

  def unsetTransformer: AnnotationFragment = unsetField(4)

  def unsetMessage: AnnotationFragment = unsetField(5)


  override def write(_oprot: TProtocol): Unit = {
    AnnotationFragment.validate(this)
    _oprot.writeStructBegin(Struct)
    if (`type` ne null) writeTypeField(`type`, _oprot)
    if (df ne null) writeDfField(df, _oprot)
    if (spec ne null) writeSpecField(spec, _oprot)
    if (transformer ne null) writeTransformerField(transformer, _oprot)
    if (message ne null) writeMessageField(message, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    `type`: String = this.`type`,
    df: modeldb.DataFrame = this.df,
    spec: modeldb.TransformerSpec = this.spec,
    transformer: modeldb.Transformer = this.transformer,
    message: String = this.message,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): AnnotationFragment =
    new Immutable(
      `type`,
      df,
      spec,
      transformer,
      message,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[AnnotationFragment]

  private def _equals(x: AnnotationFragment, y: AnnotationFragment): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[AnnotationFragment])

  override def hashCode: Int = {
    var hash = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    hash
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 5

  override def productElement(n: Int): Any = n match {
    case 0 => this.`type`
    case 1 => this.df
    case 2 => this.spec
    case 3 => this.transformer
    case 4 => this.message
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "AnnotationFragment"

  def _codec: ValidatingThriftStructCodec3[AnnotationFragment] = AnnotationFragment
}

