/**
 * Generated by Scrooge
 *   version: 18.10.0
 *   rev: dda071e1412b53f4bfdebc19e474f584e475d475
 *   built at: 20181018-174244
 */
package modeldb

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object MetricEvent extends ValidatingThriftStructCodec3[MetricEvent] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("MetricEvent")
  val DfField: TField = new TField("df", TType.STRUCT, 1)
  val DfFieldManifest: Manifest[modeldb.DataFrame] = implicitly[Manifest[modeldb.DataFrame]]
  val ModelField: TField = new TField("model", TType.STRUCT, 2)
  val ModelFieldManifest: Manifest[modeldb.Transformer] = implicitly[Manifest[modeldb.Transformer]]
  val MetricTypeField: TField = new TField("metricType", TType.STRING, 3)
  val MetricTypeFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val MetricValueField: TField = new TField("metricValue", TType.DOUBLE, 4)
  val MetricValueFieldManifest: Manifest[Double] = implicitly[Manifest[Double]]
  val LabelColField: TField = new TField("labelCol", TType.STRING, 5)
  val LabelColFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val PredictionColField: TField = new TField("predictionCol", TType.STRING, 6)
  val PredictionColFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val ExperimentRunIdField: TField = new TField("experimentRunId", TType.I32, 7)
  val ExperimentRunIdFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      DfField,
      false,
      false,
      DfFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ModelField,
      false,
      false,
      ModelFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      MetricTypeField,
      false,
      false,
      MetricTypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      MetricValueField,
      false,
      false,
      MetricValueFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      LabelColField,
      false,
      false,
      LabelColFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      PredictionColField,
      false,
      false,
      PredictionColFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ExperimentRunIdField,
      false,
      false,
      ExperimentRunIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: MetricEvent): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: MetricEvent): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.df)
    buf ++= validateField(item.model)
    buf ++= validateField(item.metricType)
    buf ++= validateField(item.metricValue)
    buf ++= validateField(item.labelCol)
    buf ++= validateField(item.predictionCol)
    buf ++= validateField(item.experimentRunId)
    buf.toList
  }

  def withoutPassthroughFields(original: MetricEvent): MetricEvent =
    new Immutable(
      df =
        {
          val field = original.df
          modeldb.DataFrame.withoutPassthroughFields(field)
        },
      model =
        {
          val field = original.model
          modeldb.Transformer.withoutPassthroughFields(field)
        },
      metricType =
        {
          val field = original.metricType
          field
        },
      metricValue =
        {
          val field = original.metricValue
          field
        },
      labelCol =
        {
          val field = original.labelCol
          field
        },
      predictionCol =
        {
          val field = original.predictionCol
          field
        },
      experimentRunId =
        {
          val field = original.experimentRunId
          field
        }
    )

  override def encode(_item: MetricEvent, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): MetricEvent = {

    var df: modeldb.DataFrame = null
    var model: modeldb.Transformer = null
    var metricTypeOffset: Int = -1
    var metricValue: Double = 0.0
    var labelColOffset: Int = -1
    var predictionColOffset: Int = -1
    var experimentRunId: Int = 0

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                df = readDfValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'df' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                model = readModelValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'model' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                metricTypeOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'metricType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.DOUBLE =>
    
                metricValue = readMetricValueValue(_iprot)
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'metricValue' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                labelColOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'labelCol' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                predictionColOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'predictionCol' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.I32 =>
    
                experimentRunId = readExperimentRunIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'experimentRunId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      df,
      model,
      metricTypeOffset,
      metricValue,
      labelColOffset,
      predictionColOffset,
      experimentRunId,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): MetricEvent =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[modeldb] def eagerDecode(_iprot: TProtocol): MetricEvent = {
    var df: modeldb.DataFrame = null
    var model: modeldb.Transformer = null
    var metricType: String = null
    var metricValue: Double = 0.0
    var labelCol: String = null
    var predictionCol: String = null
    var experimentRunId: Int = 0
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
                df = readDfValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'df' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRUCT =>
                model = readModelValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'model' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                metricType = readMetricTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'metricType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.DOUBLE =>
                metricValue = readMetricValueValue(_iprot)
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'metricValue' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                labelCol = readLabelColValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'labelCol' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                predictionCol = readPredictionColValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'predictionCol' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.I32 =>
                experimentRunId = readExperimentRunIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'experimentRunId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      df,
      model,
      metricType,
      metricValue,
      labelCol,
      predictionCol,
      experimentRunId,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    df: modeldb.DataFrame,
    model: modeldb.Transformer,
    metricType: String,
    metricValue: Double,
    labelCol: String,
    predictionCol: String,
    experimentRunId: Int
  ): MetricEvent =
    new Immutable(
      df,
      model,
      metricType,
      metricValue,
      labelCol,
      predictionCol,
      experimentRunId
    )

  def unapply(_item: MetricEvent): _root_.scala.Option[_root_.scala.Tuple7[modeldb.DataFrame, modeldb.Transformer, String, Double, String, String, Int]] = _root_.scala.Some(_item.toTuple)


  @inline private[modeldb] def readDfValue(_iprot: TProtocol): modeldb.DataFrame = {
    modeldb.DataFrame.decode(_iprot)
  }

  @inline private def writeDfField(df_item: modeldb.DataFrame, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DfField)
    writeDfValue(df_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDfValue(df_item: modeldb.DataFrame, _oprot: TProtocol): Unit = {
    df_item.write(_oprot)
  }

  @inline private[modeldb] def readModelValue(_iprot: TProtocol): modeldb.Transformer = {
    modeldb.Transformer.decode(_iprot)
  }

  @inline private def writeModelField(model_item: modeldb.Transformer, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ModelField)
    writeModelValue(model_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeModelValue(model_item: modeldb.Transformer, _oprot: TProtocol): Unit = {
    model_item.write(_oprot)
  }

  @inline private[modeldb] def readMetricTypeValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeMetricTypeField(metricType_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MetricTypeField)
    writeMetricTypeValue(metricType_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMetricTypeValue(metricType_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(metricType_item)
  }

  @inline private[modeldb] def readMetricValueValue(_iprot: TProtocol): Double = {
    _iprot.readDouble()
  }

  @inline private def writeMetricValueField(metricValue_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MetricValueField)
    writeMetricValueValue(metricValue_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMetricValueValue(metricValue_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeDouble(metricValue_item)
  }

  @inline private[modeldb] def readLabelColValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeLabelColField(labelCol_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(LabelColField)
    writeLabelColValue(labelCol_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeLabelColValue(labelCol_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(labelCol_item)
  }

  @inline private[modeldb] def readPredictionColValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writePredictionColField(predictionCol_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PredictionColField)
    writePredictionColValue(predictionCol_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePredictionColValue(predictionCol_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(predictionCol_item)
  }

  @inline private[modeldb] def readExperimentRunIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeExperimentRunIdField(experimentRunId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ExperimentRunIdField)
    writeExperimentRunIdValue(experimentRunId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeExperimentRunIdValue(experimentRunId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(experimentRunId_item)
  }


  object Immutable extends ThriftStructCodec3[MetricEvent] {
    override def encode(_item: MetricEvent, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): MetricEvent = MetricEvent.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[MetricEvent] = MetricEvent.metaData
  }

  /**
   * The default read-only implementation of MetricEvent.  You typically should not need to
   * directly reference this class; instead, use the MetricEvent.apply method to construct
   * new instances.
   */
  class Immutable(
      val df: modeldb.DataFrame,
      val model: modeldb.Transformer,
      val metricType: String,
      val metricValue: Double,
      val labelCol: String,
      val predictionCol: String,
      val experimentRunId: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends MetricEvent {
    def this(
      df: modeldb.DataFrame,
      model: modeldb.Transformer,
      metricType: String,
      metricValue: Double,
      labelCol: String,
      predictionCol: String,
      experimentRunId: Int
    ) = this(
      df,
      model,
      metricType,
      metricValue,
      labelCol,
      predictionCol,
      experimentRunId,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val df: modeldb.DataFrame,
      val model: modeldb.Transformer,
      metricTypeOffset: Int,
      val metricValue: Double,
      labelColOffset: Int,
      predictionColOffset: Int,
      val experimentRunId: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends MetricEvent {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val metricType: String =
      if (metricTypeOffset == -1)
        null
      else {
        _proto.decodeString(_buf, metricTypeOffset)
      }
    lazy val labelCol: String =
      if (labelColOffset == -1)
        null
      else {
        _proto.decodeString(_buf, labelColOffset)
      }
    lazy val predictionCol: String =
      if (predictionColOffset == -1)
        null
      else {
        _proto.decodeString(_buf, predictionColOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the MetricEvent trait with additional state or
   * behavior and implement the read-only methods from MetricEvent using an underlying
   * instance.
   */
  trait Proxy extends MetricEvent {
    protected def _underlying_MetricEvent: MetricEvent
    override def df: modeldb.DataFrame = _underlying_MetricEvent.df
    override def model: modeldb.Transformer = _underlying_MetricEvent.model
    override def metricType: String = _underlying_MetricEvent.metricType
    override def metricValue: Double = _underlying_MetricEvent.metricValue
    override def labelCol: String = _underlying_MetricEvent.labelCol
    override def predictionCol: String = _underlying_MetricEvent.predictionCol
    override def experimentRunId: Int = _underlying_MetricEvent.experimentRunId
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_MetricEvent._passthroughFields
  }
}

/**
 * Prefer the companion object's [[modeldb.MetricEvent.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait MetricEvent
  extends ThriftStruct
  with _root_.scala.Product7[modeldb.DataFrame, modeldb.Transformer, String, Double, String, String, Int]
  with ValidatingThriftStruct[MetricEvent]
  with java.io.Serializable
{
  import MetricEvent._

  def df: modeldb.DataFrame
  def model: modeldb.Transformer
  def metricType: String
  def metricValue: Double
  def labelCol: String
  def predictionCol: String
  def experimentRunId: Int

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: modeldb.DataFrame = df
  def _2: modeldb.Transformer = model
  def _3: String = metricType
  def _4: Double = metricValue
  def _5: String = labelCol
  def _6: String = predictionCol
  def _7: Int = experimentRunId

  def toTuple: _root_.scala.Tuple7[modeldb.DataFrame, modeldb.Transformer, String, Double, String, String, Int] = {
    (
      df,
      model,
      metricType,
      metricValue,
      labelCol,
      predictionCol,
      experimentRunId
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (df ne null) {
                writeDfValue(df, _oprot)
                _root_.scala.Some(MetricEvent.DfField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (model ne null) {
                writeModelValue(model, _oprot)
                _root_.scala.Some(MetricEvent.ModelField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (metricType ne null) {
                writeMetricTypeValue(metricType, _oprot)
                _root_.scala.Some(MetricEvent.MetricTypeField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (true) {
                writeMetricValueValue(metricValue, _oprot)
                _root_.scala.Some(MetricEvent.MetricValueField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (labelCol ne null) {
                writeLabelColValue(labelCol, _oprot)
                _root_.scala.Some(MetricEvent.LabelColField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (predictionCol ne null) {
                writePredictionColValue(predictionCol, _oprot)
                _root_.scala.Some(MetricEvent.PredictionColField)
              } else {
                _root_.scala.None
              }
            case 7 =>
              if (true) {
                writeExperimentRunIdValue(experimentRunId, _oprot)
                _root_.scala.Some(MetricEvent.ExperimentRunIdField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): MetricEvent = {
    var df: modeldb.DataFrame = this.df
    var model: modeldb.Transformer = this.model
    var metricType: String = this.metricType
    var metricValue: Double = this.metricValue
    var labelCol: String = this.labelCol
    var predictionCol: String = this.predictionCol
    var experimentRunId: Int = this.experimentRunId
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        df = readDfValue(_blob.read)
      case 2 =>
        model = readModelValue(_blob.read)
      case 3 =>
        metricType = readMetricTypeValue(_blob.read)
      case 4 =>
        metricValue = readMetricValueValue(_blob.read)
      case 5 =>
        labelCol = readLabelColValue(_blob.read)
      case 6 =>
        predictionCol = readPredictionColValue(_blob.read)
      case 7 =>
        experimentRunId = readExperimentRunIdValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      df,
      model,
      metricType,
      metricValue,
      labelCol,
      predictionCol,
      experimentRunId,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): MetricEvent = {
    var df: modeldb.DataFrame = this.df
    var model: modeldb.Transformer = this.model
    var metricType: String = this.metricType
    var metricValue: Double = this.metricValue
    var labelCol: String = this.labelCol
    var predictionCol: String = this.predictionCol
    var experimentRunId: Int = this.experimentRunId

    _fieldId match {
      case 1 =>
        df = null
      case 2 =>
        model = null
      case 3 =>
        metricType = null
      case 4 =>
        metricValue = 0.0
      case 5 =>
        labelCol = null
      case 6 =>
        predictionCol = null
      case 7 =>
        experimentRunId = 0
      case _ =>
    }
    new Immutable(
      df,
      model,
      metricType,
      metricValue,
      labelCol,
      predictionCol,
      experimentRunId,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetDf: MetricEvent = unsetField(1)

  def unsetModel: MetricEvent = unsetField(2)

  def unsetMetricType: MetricEvent = unsetField(3)

  def unsetMetricValue: MetricEvent = unsetField(4)

  def unsetLabelCol: MetricEvent = unsetField(5)

  def unsetPredictionCol: MetricEvent = unsetField(6)

  def unsetExperimentRunId: MetricEvent = unsetField(7)


  override def write(_oprot: TProtocol): Unit = {
    MetricEvent.validate(this)
    _oprot.writeStructBegin(Struct)
    if (df ne null) writeDfField(df, _oprot)
    if (model ne null) writeModelField(model, _oprot)
    if (metricType ne null) writeMetricTypeField(metricType, _oprot)
    writeMetricValueField(metricValue, _oprot)
    if (labelCol ne null) writeLabelColField(labelCol, _oprot)
    if (predictionCol ne null) writePredictionColField(predictionCol, _oprot)
    writeExperimentRunIdField(experimentRunId, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    df: modeldb.DataFrame = this.df,
    model: modeldb.Transformer = this.model,
    metricType: String = this.metricType,
    metricValue: Double = this.metricValue,
    labelCol: String = this.labelCol,
    predictionCol: String = this.predictionCol,
    experimentRunId: Int = this.experimentRunId,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): MetricEvent =
    new Immutable(
      df,
      model,
      metricType,
      metricValue,
      labelCol,
      predictionCol,
      experimentRunId,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[MetricEvent]

  private def _equals(x: MetricEvent, y: MetricEvent): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[MetricEvent])

  override def hashCode: Int = {
    var hash = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    hash
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 7

  override def productElement(n: Int): Any = n match {
    case 0 => this.df
    case 1 => this.model
    case 2 => this.metricType
    case 3 => this.metricValue
    case 4 => this.labelCol
    case 5 => this.predictionCol
    case 6 => this.experimentRunId
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "MetricEvent"

  def _codec: ValidatingThriftStructCodec3[MetricEvent] = MetricEvent
}

