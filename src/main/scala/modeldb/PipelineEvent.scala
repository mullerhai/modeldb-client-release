/**
 * Generated by Scrooge
 *   version: 18.10.0
 *   rev: dda071e1412b53f4bfdebc19e474f584e475d475
 *   built at: 20181018-174244
 */
package modeldb

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object PipelineEvent extends ValidatingThriftStructCodec3[PipelineEvent] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("PipelineEvent")
  val PipelineFitField: TField = new TField("pipelineFit", TType.STRUCT, 1)
  val PipelineFitFieldManifest: Manifest[modeldb.FitEvent] = implicitly[Manifest[modeldb.FitEvent]]
  val TransformStagesField: TField = new TField("transformStages", TType.LIST, 2)
  val TransformStagesFieldManifest: Manifest[Seq[modeldb.PipelineTransformStage]] = implicitly[Manifest[Seq[modeldb.PipelineTransformStage]]]
  val FitStagesField: TField = new TField("fitStages", TType.LIST, 3)
  val FitStagesFieldManifest: Manifest[Seq[modeldb.PipelineFitStage]] = implicitly[Manifest[Seq[modeldb.PipelineFitStage]]]
  val ExperimentRunIdField: TField = new TField("experimentRunId", TType.I32, 4)
  val ExperimentRunIdFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      PipelineFitField,
      false,
      false,
      PipelineFitFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      TransformStagesField,
      false,
      false,
      TransformStagesFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[modeldb.PipelineTransformStage]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      FitStagesField,
      false,
      false,
      FitStagesFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[modeldb.PipelineFitStage]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ExperimentRunIdField,
      false,
      false,
      ExperimentRunIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: PipelineEvent): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: PipelineEvent): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.pipelineFit)
    buf ++= validateField(item.transformStages)
    buf ++= validateField(item.fitStages)
    buf ++= validateField(item.experimentRunId)
    buf.toList
  }

  def withoutPassthroughFields(original: PipelineEvent): PipelineEvent =
    new Immutable(
      pipelineFit =
        {
          val field = original.pipelineFit
          modeldb.FitEvent.withoutPassthroughFields(field)
        },
      transformStages =
        {
          val field = original.transformStages
          field.map { field =>
            modeldb.PipelineTransformStage.withoutPassthroughFields(field)
          }
        },
      fitStages =
        {
          val field = original.fitStages
          field.map { field =>
            modeldb.PipelineFitStage.withoutPassthroughFields(field)
          }
        },
      experimentRunId =
        {
          val field = original.experimentRunId
          field
        }
    )

  override def encode(_item: PipelineEvent, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): PipelineEvent = {

    var pipelineFit: modeldb.FitEvent = null
    var transformStages: Seq[modeldb.PipelineTransformStage] = Seq[modeldb.PipelineTransformStage]()
    var fitStages: Seq[modeldb.PipelineFitStage] = Seq[modeldb.PipelineFitStage]()
    var experimentRunId: Int = 0

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                pipelineFit = readPipelineFitValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'pipelineFit' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
    
                transformStages = readTransformStagesValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'transformStages' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST =>
    
                fitStages = readFitStagesValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'fitStages' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 =>
    
                experimentRunId = readExperimentRunIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'experimentRunId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      pipelineFit,
      transformStages,
      fitStages,
      experimentRunId,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): PipelineEvent =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[modeldb] def eagerDecode(_iprot: TProtocol): PipelineEvent = {
    var pipelineFit: modeldb.FitEvent = null
    var transformStages: Seq[modeldb.PipelineTransformStage] = Seq[modeldb.PipelineTransformStage]()
    var fitStages: Seq[modeldb.PipelineFitStage] = Seq[modeldb.PipelineFitStage]()
    var experimentRunId: Int = 0
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
                pipelineFit = readPipelineFitValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'pipelineFit' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
                transformStages = readTransformStagesValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'transformStages' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST =>
                fitStages = readFitStagesValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'fitStages' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 =>
                experimentRunId = readExperimentRunIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'experimentRunId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      pipelineFit,
      transformStages,
      fitStages,
      experimentRunId,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    pipelineFit: modeldb.FitEvent,
    transformStages: Seq[modeldb.PipelineTransformStage] = Seq[modeldb.PipelineTransformStage](),
    fitStages: Seq[modeldb.PipelineFitStage] = Seq[modeldb.PipelineFitStage](),
    experimentRunId: Int
  ): PipelineEvent =
    new Immutable(
      pipelineFit,
      transformStages,
      fitStages,
      experimentRunId
    )

  def unapply(_item: PipelineEvent): _root_.scala.Option[_root_.scala.Tuple4[modeldb.FitEvent, Seq[modeldb.PipelineTransformStage], Seq[modeldb.PipelineFitStage], Int]] = _root_.scala.Some(_item.toTuple)


  @inline private[modeldb] def readPipelineFitValue(_iprot: TProtocol): modeldb.FitEvent = {
    modeldb.FitEvent.decode(_iprot)
  }

  @inline private def writePipelineFitField(pipelineFit_item: modeldb.FitEvent, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PipelineFitField)
    writePipelineFitValue(pipelineFit_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePipelineFitValue(pipelineFit_item: modeldb.FitEvent, _oprot: TProtocol): Unit = {
    pipelineFit_item.write(_oprot)
  }

  @inline private[modeldb] def readTransformStagesValue(_iprot: TProtocol): Seq[modeldb.PipelineTransformStage] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[modeldb.PipelineTransformStage](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          modeldb.PipelineTransformStage.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeTransformStagesField(transformStages_item: Seq[modeldb.PipelineTransformStage], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TransformStagesField)
    writeTransformStagesValue(transformStages_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTransformStagesValue(transformStages_item: Seq[modeldb.PipelineTransformStage], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, transformStages_item.size))
    transformStages_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = transformStages_item.size
        while (_i < _size) {
          val transformStages_item_element = transformStages_item(_i)
          transformStages_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        transformStages_item.foreach { transformStages_item_element =>
          transformStages_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[modeldb] def readFitStagesValue(_iprot: TProtocol): Seq[modeldb.PipelineFitStage] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[modeldb.PipelineFitStage](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          modeldb.PipelineFitStage.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeFitStagesField(fitStages_item: Seq[modeldb.PipelineFitStage], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FitStagesField)
    writeFitStagesValue(fitStages_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFitStagesValue(fitStages_item: Seq[modeldb.PipelineFitStage], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, fitStages_item.size))
    fitStages_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = fitStages_item.size
        while (_i < _size) {
          val fitStages_item_element = fitStages_item(_i)
          fitStages_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        fitStages_item.foreach { fitStages_item_element =>
          fitStages_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[modeldb] def readExperimentRunIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeExperimentRunIdField(experimentRunId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ExperimentRunIdField)
    writeExperimentRunIdValue(experimentRunId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeExperimentRunIdValue(experimentRunId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(experimentRunId_item)
  }


  object Immutable extends ThriftStructCodec3[PipelineEvent] {
    override def encode(_item: PipelineEvent, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): PipelineEvent = PipelineEvent.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[PipelineEvent] = PipelineEvent.metaData
  }

  /**
   * The default read-only implementation of PipelineEvent.  You typically should not need to
   * directly reference this class; instead, use the PipelineEvent.apply method to construct
   * new instances.
   */
  class Immutable(
      val pipelineFit: modeldb.FitEvent,
      val transformStages: Seq[modeldb.PipelineTransformStage],
      val fitStages: Seq[modeldb.PipelineFitStage],
      val experimentRunId: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends PipelineEvent {
    def this(
      pipelineFit: modeldb.FitEvent,
      transformStages: Seq[modeldb.PipelineTransformStage] = Seq[modeldb.PipelineTransformStage](),
      fitStages: Seq[modeldb.PipelineFitStage] = Seq[modeldb.PipelineFitStage](),
      experimentRunId: Int
    ) = this(
      pipelineFit,
      transformStages,
      fitStages,
      experimentRunId,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val pipelineFit: modeldb.FitEvent,
      val transformStages: Seq[modeldb.PipelineTransformStage],
      val fitStages: Seq[modeldb.PipelineFitStage],
      val experimentRunId: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends PipelineEvent {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the PipelineEvent trait with additional state or
   * behavior and implement the read-only methods from PipelineEvent using an underlying
   * instance.
   */
  trait Proxy extends PipelineEvent {
    protected def _underlying_PipelineEvent: PipelineEvent
    override def pipelineFit: modeldb.FitEvent = _underlying_PipelineEvent.pipelineFit
    override def transformStages: Seq[modeldb.PipelineTransformStage] = _underlying_PipelineEvent.transformStages
    override def fitStages: Seq[modeldb.PipelineFitStage] = _underlying_PipelineEvent.fitStages
    override def experimentRunId: Int = _underlying_PipelineEvent.experimentRunId
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_PipelineEvent._passthroughFields
  }
}

/**
 * Prefer the companion object's [[modeldb.PipelineEvent.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait PipelineEvent
  extends ThriftStruct
  with _root_.scala.Product4[modeldb.FitEvent, Seq[modeldb.PipelineTransformStage], Seq[modeldb.PipelineFitStage], Int]
  with ValidatingThriftStruct[PipelineEvent]
  with java.io.Serializable
{
  import PipelineEvent._

  def pipelineFit: modeldb.FitEvent
  def transformStages: Seq[modeldb.PipelineTransformStage]
  def fitStages: Seq[modeldb.PipelineFitStage]
  def experimentRunId: Int

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: modeldb.FitEvent = pipelineFit
  def _2: Seq[modeldb.PipelineTransformStage] = transformStages
  def _3: Seq[modeldb.PipelineFitStage] = fitStages
  def _4: Int = experimentRunId

  def toTuple: _root_.scala.Tuple4[modeldb.FitEvent, Seq[modeldb.PipelineTransformStage], Seq[modeldb.PipelineFitStage], Int] = {
    (
      pipelineFit,
      transformStages,
      fitStages,
      experimentRunId
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (pipelineFit ne null) {
                writePipelineFitValue(pipelineFit, _oprot)
                _root_.scala.Some(PipelineEvent.PipelineFitField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (transformStages ne null) {
                writeTransformStagesValue(transformStages, _oprot)
                _root_.scala.Some(PipelineEvent.TransformStagesField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (fitStages ne null) {
                writeFitStagesValue(fitStages, _oprot)
                _root_.scala.Some(PipelineEvent.FitStagesField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (true) {
                writeExperimentRunIdValue(experimentRunId, _oprot)
                _root_.scala.Some(PipelineEvent.ExperimentRunIdField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): PipelineEvent = {
    var pipelineFit: modeldb.FitEvent = this.pipelineFit
    var transformStages: Seq[modeldb.PipelineTransformStage] = this.transformStages
    var fitStages: Seq[modeldb.PipelineFitStage] = this.fitStages
    var experimentRunId: Int = this.experimentRunId
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        pipelineFit = readPipelineFitValue(_blob.read)
      case 2 =>
        transformStages = readTransformStagesValue(_blob.read)
      case 3 =>
        fitStages = readFitStagesValue(_blob.read)
      case 4 =>
        experimentRunId = readExperimentRunIdValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      pipelineFit,
      transformStages,
      fitStages,
      experimentRunId,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): PipelineEvent = {
    var pipelineFit: modeldb.FitEvent = this.pipelineFit
    var transformStages: Seq[modeldb.PipelineTransformStage] = this.transformStages
    var fitStages: Seq[modeldb.PipelineFitStage] = this.fitStages
    var experimentRunId: Int = this.experimentRunId

    _fieldId match {
      case 1 =>
        pipelineFit = null
      case 2 =>
        transformStages = Seq[modeldb.PipelineTransformStage]()
      case 3 =>
        fitStages = Seq[modeldb.PipelineFitStage]()
      case 4 =>
        experimentRunId = 0
      case _ =>
    }
    new Immutable(
      pipelineFit,
      transformStages,
      fitStages,
      experimentRunId,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetPipelineFit: PipelineEvent = unsetField(1)

  def unsetTransformStages: PipelineEvent = unsetField(2)

  def unsetFitStages: PipelineEvent = unsetField(3)

  def unsetExperimentRunId: PipelineEvent = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    PipelineEvent.validate(this)
    _oprot.writeStructBegin(Struct)
    if (pipelineFit ne null) writePipelineFitField(pipelineFit, _oprot)
    if (transformStages ne null) writeTransformStagesField(transformStages, _oprot)
    if (fitStages ne null) writeFitStagesField(fitStages, _oprot)
    writeExperimentRunIdField(experimentRunId, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    pipelineFit: modeldb.FitEvent = this.pipelineFit,
    transformStages: Seq[modeldb.PipelineTransformStage] = this.transformStages,
    fitStages: Seq[modeldb.PipelineFitStage] = this.fitStages,
    experimentRunId: Int = this.experimentRunId,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): PipelineEvent =
    new Immutable(
      pipelineFit,
      transformStages,
      fitStages,
      experimentRunId,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[PipelineEvent]

  private def _equals(x: PipelineEvent, y: PipelineEvent): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[PipelineEvent])

  override def hashCode: Int = {
    var hash = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    hash
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.pipelineFit
    case 1 => this.transformStages
    case 2 => this.fitStages
    case 3 => this.experimentRunId
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "PipelineEvent"

  def _codec: ValidatingThriftStructCodec3[PipelineEvent] = PipelineEvent
}

