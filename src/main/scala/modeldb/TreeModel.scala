/**
 * Generated by Scrooge
 *   version: 18.10.0
 *   rev: dda071e1412b53f4bfdebc19e474f584e475d475
 *   built at: 20181018-174244
 */
package modeldb

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object TreeModel extends ValidatingThriftStructCodec3[TreeModel] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TreeModel")
  val ModelTypeField: TField = new TField("modelType", TType.STRING, 1)
  val ModelTypeFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val ComponentsField: TField = new TField("components", TType.LIST, 2)
  val ComponentsFieldManifest: Manifest[Seq[modeldb.TreeComponent]] = implicitly[Manifest[Seq[modeldb.TreeComponent]]]
  val FeatureImportancesField: TField = new TField("featureImportances", TType.LIST, 3)
  val FeatureImportancesFieldManifest: Manifest[Seq[Double]] = implicitly[Manifest[Seq[Double]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      ModelTypeField,
      false,
      false,
      ModelTypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ComponentsField,
      false,
      false,
      ComponentsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[modeldb.TreeComponent]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      FeatureImportancesField,
      false,
      false,
      FeatureImportancesFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[Double]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TreeModel): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TreeModel): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.modelType)
    buf ++= validateField(item.components)
    buf ++= validateField(item.featureImportances)
    buf.toList
  }

  def withoutPassthroughFields(original: TreeModel): TreeModel =
    new Immutable(
      modelType =
        {
          val field = original.modelType
          field
        },
      components =
        {
          val field = original.components
          field.map { field =>
            modeldb.TreeComponent.withoutPassthroughFields(field)
          }
        },
      featureImportances =
        {
          val field = original.featureImportances
          field.map { field =>
            field
          }
        }
    )

  override def encode(_item: TreeModel, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TreeModel = {

    var modelTypeOffset: Int = -1
    var components: Seq[modeldb.TreeComponent] = Seq[modeldb.TreeComponent]()
    var featureImportances: Seq[Double] = Seq[Double]()

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                modelTypeOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'modelType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
    
                components = readComponentsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'components' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST =>
    
                featureImportances = readFeatureImportancesValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'featureImportances' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      modelTypeOffset,
      components,
      featureImportances,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TreeModel =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[modeldb] def eagerDecode(_iprot: TProtocol): TreeModel = {
    var modelType: String = null
    var components: Seq[modeldb.TreeComponent] = Seq[modeldb.TreeComponent]()
    var featureImportances: Seq[Double] = Seq[Double]()
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                modelType = readModelTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'modelType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
                components = readComponentsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'components' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST =>
                featureImportances = readFeatureImportancesValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'featureImportances' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      modelType,
      components,
      featureImportances,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    modelType: String,
    components: Seq[modeldb.TreeComponent] = Seq[modeldb.TreeComponent](),
    featureImportances: Seq[Double] = Seq[Double]()
  ): TreeModel =
    new Immutable(
      modelType,
      components,
      featureImportances
    )

  def unapply(_item: TreeModel): _root_.scala.Option[_root_.scala.Tuple3[String, Seq[modeldb.TreeComponent], Seq[Double]]] = _root_.scala.Some(_item.toTuple)


  @inline private[modeldb] def readModelTypeValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeModelTypeField(modelType_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ModelTypeField)
    writeModelTypeValue(modelType_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeModelTypeValue(modelType_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(modelType_item)
  }

  @inline private[modeldb] def readComponentsValue(_iprot: TProtocol): Seq[modeldb.TreeComponent] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[modeldb.TreeComponent](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          modeldb.TreeComponent.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeComponentsField(components_item: Seq[modeldb.TreeComponent], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ComponentsField)
    writeComponentsValue(components_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeComponentsValue(components_item: Seq[modeldb.TreeComponent], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, components_item.size))
    components_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = components_item.size
        while (_i < _size) {
          val components_item_element = components_item(_i)
          components_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        components_item.foreach { components_item_element =>
          components_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[modeldb] def readFeatureImportancesValue(_iprot: TProtocol): Seq[Double] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[Double](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          _iprot.readDouble()
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeFeatureImportancesField(featureImportances_item: Seq[Double], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FeatureImportancesField)
    writeFeatureImportancesValue(featureImportances_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFeatureImportancesValue(featureImportances_item: Seq[Double], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.DOUBLE, featureImportances_item.size))
    featureImportances_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = featureImportances_item.size
        while (_i < _size) {
          val featureImportances_item_element = featureImportances_item(_i)
          _oprot.writeDouble(featureImportances_item_element)
          _i += 1
        }
      case _ =>
        featureImportances_item.foreach { featureImportances_item_element =>
          _oprot.writeDouble(featureImportances_item_element)
        }
    }
    _oprot.writeListEnd()
  }


  object Immutable extends ThriftStructCodec3[TreeModel] {
    override def encode(_item: TreeModel, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TreeModel = TreeModel.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TreeModel] = TreeModel.metaData
  }

  /**
   * The default read-only implementation of TreeModel.  You typically should not need to
   * directly reference this class; instead, use the TreeModel.apply method to construct
   * new instances.
   */
  class Immutable(
      val modelType: String,
      val components: Seq[modeldb.TreeComponent],
      val featureImportances: Seq[Double],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TreeModel {
    def this(
      modelType: String,
      components: Seq[modeldb.TreeComponent] = Seq[modeldb.TreeComponent](),
      featureImportances: Seq[Double] = Seq[Double]()
    ) = this(
      modelType,
      components,
      featureImportances,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      modelTypeOffset: Int,
      val components: Seq[modeldb.TreeComponent],
      val featureImportances: Seq[Double],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TreeModel {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val modelType: String =
      if (modelTypeOffset == -1)
        null
      else {
        _proto.decodeString(_buf, modelTypeOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TreeModel trait with additional state or
   * behavior and implement the read-only methods from TreeModel using an underlying
   * instance.
   */
  trait Proxy extends TreeModel {
    protected def _underlying_TreeModel: TreeModel
    override def modelType: String = _underlying_TreeModel.modelType
    override def components: Seq[modeldb.TreeComponent] = _underlying_TreeModel.components
    override def featureImportances: Seq[Double] = _underlying_TreeModel.featureImportances
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TreeModel._passthroughFields
  }
}

/**
 * Prefer the companion object's [[modeldb.TreeModel.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TreeModel
  extends ThriftStruct
  with _root_.scala.Product3[String, Seq[modeldb.TreeComponent], Seq[Double]]
  with ValidatingThriftStruct[TreeModel]
  with java.io.Serializable
{
  import TreeModel._

  def modelType: String
  def components: Seq[modeldb.TreeComponent]
  def featureImportances: Seq[Double]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: String = modelType
  def _2: Seq[modeldb.TreeComponent] = components
  def _3: Seq[Double] = featureImportances

  def toTuple: _root_.scala.Tuple3[String, Seq[modeldb.TreeComponent], Seq[Double]] = {
    (
      modelType,
      components,
      featureImportances
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (modelType ne null) {
                writeModelTypeValue(modelType, _oprot)
                _root_.scala.Some(TreeModel.ModelTypeField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (components ne null) {
                writeComponentsValue(components, _oprot)
                _root_.scala.Some(TreeModel.ComponentsField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (featureImportances ne null) {
                writeFeatureImportancesValue(featureImportances, _oprot)
                _root_.scala.Some(TreeModel.FeatureImportancesField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TreeModel = {
    var modelType: String = this.modelType
    var components: Seq[modeldb.TreeComponent] = this.components
    var featureImportances: Seq[Double] = this.featureImportances
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        modelType = readModelTypeValue(_blob.read)
      case 2 =>
        components = readComponentsValue(_blob.read)
      case 3 =>
        featureImportances = readFeatureImportancesValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      modelType,
      components,
      featureImportances,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TreeModel = {
    var modelType: String = this.modelType
    var components: Seq[modeldb.TreeComponent] = this.components
    var featureImportances: Seq[Double] = this.featureImportances

    _fieldId match {
      case 1 =>
        modelType = null
      case 2 =>
        components = Seq[modeldb.TreeComponent]()
      case 3 =>
        featureImportances = Seq[Double]()
      case _ =>
    }
    new Immutable(
      modelType,
      components,
      featureImportances,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetModelType: TreeModel = unsetField(1)

  def unsetComponents: TreeModel = unsetField(2)

  def unsetFeatureImportances: TreeModel = unsetField(3)


  override def write(_oprot: TProtocol): Unit = {
    TreeModel.validate(this)
    _oprot.writeStructBegin(Struct)
    if (modelType ne null) writeModelTypeField(modelType, _oprot)
    if (components ne null) writeComponentsField(components, _oprot)
    if (featureImportances ne null) writeFeatureImportancesField(featureImportances, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    modelType: String = this.modelType,
    components: Seq[modeldb.TreeComponent] = this.components,
    featureImportances: Seq[Double] = this.featureImportances,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TreeModel =
    new Immutable(
      modelType,
      components,
      featureImportances,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TreeModel]

  private def _equals(x: TreeModel, y: TreeModel): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TreeModel])

  override def hashCode: Int = {
    var hash = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    hash
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 3

  override def productElement(n: Int): Any = n match {
    case 0 => this.modelType
    case 1 => this.components
    case 2 => this.featureImportances
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TreeModel"

  def _codec: ValidatingThriftStructCodec3[TreeModel] = TreeModel
}

