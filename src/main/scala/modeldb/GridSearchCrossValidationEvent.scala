/**
 * Generated by Scrooge
 *   version: 18.10.0
 *   rev: dda071e1412b53f4bfdebc19e474f584e475d475
 *   built at: 20181018-174244
 */
package modeldb

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object GridSearchCrossValidationEvent extends ValidatingThriftStructCodec3[GridSearchCrossValidationEvent] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("GridSearchCrossValidationEvent")
  val NumFoldsField: TField = new TField("numFolds", TType.I32, 1)
  val NumFoldsFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]
  val BestFitField: TField = new TField("bestFit", TType.STRUCT, 2)
  val BestFitFieldManifest: Manifest[modeldb.FitEvent] = implicitly[Manifest[modeldb.FitEvent]]
  val CrossValidationsField: TField = new TField("crossValidations", TType.LIST, 3)
  val CrossValidationsFieldManifest: Manifest[Seq[modeldb.CrossValidationEvent]] = implicitly[Manifest[Seq[modeldb.CrossValidationEvent]]]
  val ExperimentRunIdField: TField = new TField("experimentRunId", TType.I32, 4)
  val ExperimentRunIdFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]
  val ProblemTypeField: TField = new TField("problemType", TType.ENUM, 5)
  val ProblemTypeFieldI32: TField = new TField("problemType", TType.I32, 5)
  val ProblemTypeFieldManifest: Manifest[modeldb.ProblemType] = implicitly[Manifest[modeldb.ProblemType]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      NumFoldsField,
      false,
      false,
      NumFoldsFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      BestFitField,
      false,
      false,
      BestFitFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      CrossValidationsField,
      false,
      false,
      CrossValidationsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[modeldb.CrossValidationEvent]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ExperimentRunIdField,
      false,
      false,
      ExperimentRunIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ProblemTypeField,
      false,
      false,
      ProblemTypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[modeldb.ProblemType](ProblemType.Undefined)
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: GridSearchCrossValidationEvent): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: GridSearchCrossValidationEvent): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.numFolds)
    buf ++= validateField(item.bestFit)
    buf ++= validateField(item.crossValidations)
    buf ++= validateField(item.experimentRunId)
    buf ++= validateField(item.problemType)
    buf.toList
  }

  def withoutPassthroughFields(original: GridSearchCrossValidationEvent): GridSearchCrossValidationEvent =
    new Immutable(
      numFolds =
        {
          val field = original.numFolds
          field
        },
      bestFit =
        {
          val field = original.bestFit
          modeldb.FitEvent.withoutPassthroughFields(field)
        },
      crossValidations =
        {
          val field = original.crossValidations
          field.map { field =>
            modeldb.CrossValidationEvent.withoutPassthroughFields(field)
          }
        },
      experimentRunId =
        {
          val field = original.experimentRunId
          field
        },
      problemType =
        {
          val field = original.problemType
          field
        }
    )

  override def encode(_item: GridSearchCrossValidationEvent, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): GridSearchCrossValidationEvent = {

    var numFolds: Int = 0
    var bestFit: modeldb.FitEvent = null
    var crossValidations: Seq[modeldb.CrossValidationEvent] = Seq[modeldb.CrossValidationEvent]()
    var experimentRunId: Int = 0
    var problemType: modeldb.ProblemType = ProblemType.Undefined

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
    
                numFolds = readNumFoldsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'numFolds' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                bestFit = readBestFitValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'bestFit' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST =>
    
                crossValidations = readCrossValidationsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'crossValidations' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 =>
    
                experimentRunId = readExperimentRunIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'experimentRunId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
    
                problemType = readProblemTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'problemType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      numFolds,
      bestFit,
      crossValidations,
      experimentRunId,
      problemType,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): GridSearchCrossValidationEvent =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[modeldb] def eagerDecode(_iprot: TProtocol): GridSearchCrossValidationEvent = {
    var numFolds: Int = 0
    var bestFit: modeldb.FitEvent = null
    var crossValidations: Seq[modeldb.CrossValidationEvent] = Seq[modeldb.CrossValidationEvent]()
    var experimentRunId: Int = 0
    var problemType: modeldb.ProblemType = ProblemType.Undefined
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
                numFolds = readNumFoldsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'numFolds' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRUCT =>
                bestFit = readBestFitValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'bestFit' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST =>
                crossValidations = readCrossValidationsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'crossValidations' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 =>
                experimentRunId = readExperimentRunIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'experimentRunId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                problemType = readProblemTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'problemType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      numFolds,
      bestFit,
      crossValidations,
      experimentRunId,
      problemType,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    numFolds: Int,
    bestFit: modeldb.FitEvent,
    crossValidations: Seq[modeldb.CrossValidationEvent] = Seq[modeldb.CrossValidationEvent](),
    experimentRunId: Int,
    problemType: modeldb.ProblemType = ProblemType.Undefined
  ): GridSearchCrossValidationEvent =
    new Immutable(
      numFolds,
      bestFit,
      crossValidations,
      experimentRunId,
      problemType
    )

  def unapply(_item: GridSearchCrossValidationEvent): _root_.scala.Option[_root_.scala.Tuple5[Int, modeldb.FitEvent, Seq[modeldb.CrossValidationEvent], Int, modeldb.ProblemType]] = _root_.scala.Some(_item.toTuple)


  @inline private[modeldb] def readNumFoldsValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeNumFoldsField(numFolds_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NumFoldsField)
    writeNumFoldsValue(numFolds_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNumFoldsValue(numFolds_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(numFolds_item)
  }

  @inline private[modeldb] def readBestFitValue(_iprot: TProtocol): modeldb.FitEvent = {
    modeldb.FitEvent.decode(_iprot)
  }

  @inline private def writeBestFitField(bestFit_item: modeldb.FitEvent, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(BestFitField)
    writeBestFitValue(bestFit_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeBestFitValue(bestFit_item: modeldb.FitEvent, _oprot: TProtocol): Unit = {
    bestFit_item.write(_oprot)
  }

  @inline private[modeldb] def readCrossValidationsValue(_iprot: TProtocol): Seq[modeldb.CrossValidationEvent] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[modeldb.CrossValidationEvent](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          modeldb.CrossValidationEvent.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeCrossValidationsField(crossValidations_item: Seq[modeldb.CrossValidationEvent], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CrossValidationsField)
    writeCrossValidationsValue(crossValidations_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCrossValidationsValue(crossValidations_item: Seq[modeldb.CrossValidationEvent], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, crossValidations_item.size))
    crossValidations_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = crossValidations_item.size
        while (_i < _size) {
          val crossValidations_item_element = crossValidations_item(_i)
          crossValidations_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        crossValidations_item.foreach { crossValidations_item_element =>
          crossValidations_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[modeldb] def readExperimentRunIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeExperimentRunIdField(experimentRunId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ExperimentRunIdField)
    writeExperimentRunIdValue(experimentRunId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeExperimentRunIdValue(experimentRunId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(experimentRunId_item)
  }

  @inline private[modeldb] def readProblemTypeValue(_iprot: TProtocol): modeldb.ProblemType = {
    modeldb.ProblemType.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeProblemTypeField(problemType_item: modeldb.ProblemType, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ProblemTypeFieldI32)
    writeProblemTypeValue(problemType_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeProblemTypeValue(problemType_item: modeldb.ProblemType, _oprot: TProtocol): Unit = {
    _oprot.writeI32(problemType_item.value)
  }


  object Immutable extends ThriftStructCodec3[GridSearchCrossValidationEvent] {
    override def encode(_item: GridSearchCrossValidationEvent, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): GridSearchCrossValidationEvent = GridSearchCrossValidationEvent.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[GridSearchCrossValidationEvent] = GridSearchCrossValidationEvent.metaData
  }

  /**
   * The default read-only implementation of GridSearchCrossValidationEvent.  You typically should not need to
   * directly reference this class; instead, use the GridSearchCrossValidationEvent.apply method to construct
   * new instances.
   */
  class Immutable(
      val numFolds: Int,
      val bestFit: modeldb.FitEvent,
      val crossValidations: Seq[modeldb.CrossValidationEvent],
      val experimentRunId: Int,
      val problemType: modeldb.ProblemType,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends GridSearchCrossValidationEvent {
    def this(
      numFolds: Int,
      bestFit: modeldb.FitEvent,
      crossValidations: Seq[modeldb.CrossValidationEvent] = Seq[modeldb.CrossValidationEvent](),
      experimentRunId: Int,
      problemType: modeldb.ProblemType = ProblemType.Undefined
    ) = this(
      numFolds,
      bestFit,
      crossValidations,
      experimentRunId,
      problemType,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val numFolds: Int,
      val bestFit: modeldb.FitEvent,
      val crossValidations: Seq[modeldb.CrossValidationEvent],
      val experimentRunId: Int,
      val problemType: modeldb.ProblemType,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends GridSearchCrossValidationEvent {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the GridSearchCrossValidationEvent trait with additional state or
   * behavior and implement the read-only methods from GridSearchCrossValidationEvent using an underlying
   * instance.
   */
  trait Proxy extends GridSearchCrossValidationEvent {
    protected def _underlying_GridSearchCrossValidationEvent: GridSearchCrossValidationEvent
    override def numFolds: Int = _underlying_GridSearchCrossValidationEvent.numFolds
    override def bestFit: modeldb.FitEvent = _underlying_GridSearchCrossValidationEvent.bestFit
    override def crossValidations: Seq[modeldb.CrossValidationEvent] = _underlying_GridSearchCrossValidationEvent.crossValidations
    override def experimentRunId: Int = _underlying_GridSearchCrossValidationEvent.experimentRunId
    override def problemType: modeldb.ProblemType = _underlying_GridSearchCrossValidationEvent.problemType
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_GridSearchCrossValidationEvent._passthroughFields
  }
}

/**
 * Prefer the companion object's [[modeldb.GridSearchCrossValidationEvent.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait GridSearchCrossValidationEvent
  extends ThriftStruct
  with _root_.scala.Product5[Int, modeldb.FitEvent, Seq[modeldb.CrossValidationEvent], Int, modeldb.ProblemType]
  with ValidatingThriftStruct[GridSearchCrossValidationEvent]
  with java.io.Serializable
{
  import GridSearchCrossValidationEvent._

  def numFolds: Int
  def bestFit: modeldb.FitEvent
  def crossValidations: Seq[modeldb.CrossValidationEvent]
  def experimentRunId: Int
  def problemType: modeldb.ProblemType

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: Int = numFolds
  def _2: modeldb.FitEvent = bestFit
  def _3: Seq[modeldb.CrossValidationEvent] = crossValidations
  def _4: Int = experimentRunId
  def _5: modeldb.ProblemType = problemType

  def toTuple: _root_.scala.Tuple5[Int, modeldb.FitEvent, Seq[modeldb.CrossValidationEvent], Int, modeldb.ProblemType] = {
    (
      numFolds,
      bestFit,
      crossValidations,
      experimentRunId,
      problemType
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeNumFoldsValue(numFolds, _oprot)
                _root_.scala.Some(GridSearchCrossValidationEvent.NumFoldsField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (bestFit ne null) {
                writeBestFitValue(bestFit, _oprot)
                _root_.scala.Some(GridSearchCrossValidationEvent.BestFitField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (crossValidations ne null) {
                writeCrossValidationsValue(crossValidations, _oprot)
                _root_.scala.Some(GridSearchCrossValidationEvent.CrossValidationsField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (true) {
                writeExperimentRunIdValue(experimentRunId, _oprot)
                _root_.scala.Some(GridSearchCrossValidationEvent.ExperimentRunIdField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (problemType ne null) {
                writeProblemTypeValue(problemType, _oprot)
                _root_.scala.Some(GridSearchCrossValidationEvent.ProblemTypeField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): GridSearchCrossValidationEvent = {
    var numFolds: Int = this.numFolds
    var bestFit: modeldb.FitEvent = this.bestFit
    var crossValidations: Seq[modeldb.CrossValidationEvent] = this.crossValidations
    var experimentRunId: Int = this.experimentRunId
    var problemType: modeldb.ProblemType = this.problemType
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        numFolds = readNumFoldsValue(_blob.read)
      case 2 =>
        bestFit = readBestFitValue(_blob.read)
      case 3 =>
        crossValidations = readCrossValidationsValue(_blob.read)
      case 4 =>
        experimentRunId = readExperimentRunIdValue(_blob.read)
      case 5 =>
        problemType = readProblemTypeValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      numFolds,
      bestFit,
      crossValidations,
      experimentRunId,
      problemType,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): GridSearchCrossValidationEvent = {
    var numFolds: Int = this.numFolds
    var bestFit: modeldb.FitEvent = this.bestFit
    var crossValidations: Seq[modeldb.CrossValidationEvent] = this.crossValidations
    var experimentRunId: Int = this.experimentRunId
    var problemType: modeldb.ProblemType = this.problemType

    _fieldId match {
      case 1 =>
        numFolds = 0
      case 2 =>
        bestFit = null
      case 3 =>
        crossValidations = Seq[modeldb.CrossValidationEvent]()
      case 4 =>
        experimentRunId = 0
      case 5 =>
        problemType = ProblemType.Undefined
      case _ =>
    }
    new Immutable(
      numFolds,
      bestFit,
      crossValidations,
      experimentRunId,
      problemType,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetNumFolds: GridSearchCrossValidationEvent = unsetField(1)

  def unsetBestFit: GridSearchCrossValidationEvent = unsetField(2)

  def unsetCrossValidations: GridSearchCrossValidationEvent = unsetField(3)

  def unsetExperimentRunId: GridSearchCrossValidationEvent = unsetField(4)

  def unsetProblemType: GridSearchCrossValidationEvent = unsetField(5)


  override def write(_oprot: TProtocol): Unit = {
    GridSearchCrossValidationEvent.validate(this)
    _oprot.writeStructBegin(Struct)
    writeNumFoldsField(numFolds, _oprot)
    if (bestFit ne null) writeBestFitField(bestFit, _oprot)
    if (crossValidations ne null) writeCrossValidationsField(crossValidations, _oprot)
    writeExperimentRunIdField(experimentRunId, _oprot)
    if (problemType ne null) writeProblemTypeField(problemType, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    numFolds: Int = this.numFolds,
    bestFit: modeldb.FitEvent = this.bestFit,
    crossValidations: Seq[modeldb.CrossValidationEvent] = this.crossValidations,
    experimentRunId: Int = this.experimentRunId,
    problemType: modeldb.ProblemType = this.problemType,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): GridSearchCrossValidationEvent =
    new Immutable(
      numFolds,
      bestFit,
      crossValidations,
      experimentRunId,
      problemType,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[GridSearchCrossValidationEvent]

  private def _equals(x: GridSearchCrossValidationEvent, y: GridSearchCrossValidationEvent): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[GridSearchCrossValidationEvent])

  override def hashCode: Int = {
    var hash = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    hash
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 5

  override def productElement(n: Int): Any = n match {
    case 0 => this.numFolds
    case 1 => this.bestFit
    case 2 => this.crossValidations
    case 3 => this.experimentRunId
    case 4 => this.problemType
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "GridSearchCrossValidationEvent"

  def _codec: ValidatingThriftStructCodec3[GridSearchCrossValidationEvent] = GridSearchCrossValidationEvent
}

