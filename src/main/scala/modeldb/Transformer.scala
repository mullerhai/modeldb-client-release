/**
 * Generated by Scrooge
 *   version: 18.10.0
 *   rev: dda071e1412b53f4bfdebc19e474f584e475d475
 *   built at: 20181018-174244
 */
package modeldb

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object Transformer extends ValidatingThriftStructCodec3[Transformer] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("Transformer")
  val IdField: TField = new TField("id", TType.I32, 1)
  val IdFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]
  val TransformerTypeField: TField = new TField("transformerType", TType.STRING, 2)
  val TransformerTypeFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val TagField: TField = new TField("tag", TType.STRING, 3)
  val TagFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val FilepathField: TField = new TField("filepath", TType.STRING, 4)
  val FilepathFieldManifest: Manifest[String] = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      IdField,
      false,
      false,
      IdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[Int](-1)
    ),
    new ThriftStructFieldInfo(
      TransformerTypeField,
      false,
      false,
      TransformerTypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      TagField,
      false,
      false,
      TagFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[String]("")
    ),
    new ThriftStructFieldInfo(
      FilepathField,
      true,
      false,
      FilepathFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Transformer): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: Transformer): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.id)
    buf ++= validateField(item.transformerType)
    buf ++= validateField(item.tag)
    buf ++= validateField(item.filepath)
    buf.toList
  }

  def withoutPassthroughFields(original: Transformer): Transformer =
    new Immutable(
      id =
        {
          val field = original.id
          field
        },
      transformerType =
        {
          val field = original.transformerType
          field
        },
      tag =
        {
          val field = original.tag
          field
        },
      filepath =
        {
          val field = original.filepath
          field.map { field =>
            field
          }
        }
    )

  override def encode(_item: Transformer, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): Transformer = {

    var id: Int = -1
    var transformerTypeOffset: Int = -1
    var tagOffset: Int = -1
    var filepathOffset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
    
                id = readIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'id' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                transformerTypeOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'transformerType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                tagOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'tag' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                filepathOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'filepath' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      id,
      transformerTypeOffset,
      tagOffset,
      filepathOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): Transformer =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[modeldb] def eagerDecode(_iprot: TProtocol): Transformer = {
    var id: Int = -1
    var transformerType: String = null
    var tag: String = ""
    var filepath: _root_.scala.Option[String] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
                id = readIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'id' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                transformerType = readTransformerTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'transformerType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                tag = readTagValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'tag' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                filepath = _root_.scala.Some(readFilepathValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'filepath' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      id,
      transformerType,
      tag,
      filepath,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    id: Int = -1,
    transformerType: String,
    tag: String = "",
    filepath: _root_.scala.Option[String] = _root_.scala.None
  ): Transformer =
    new Immutable(
      id,
      transformerType,
      tag,
      filepath
    )

  def unapply(_item: Transformer): _root_.scala.Option[_root_.scala.Tuple4[Int, String, String, Option[String]]] = _root_.scala.Some(_item.toTuple)


  @inline private[modeldb] def readIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeIdField(id_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(IdField)
    writeIdValue(id_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeIdValue(id_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(id_item)
  }

  @inline private[modeldb] def readTransformerTypeValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeTransformerTypeField(transformerType_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TransformerTypeField)
    writeTransformerTypeValue(transformerType_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTransformerTypeValue(transformerType_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(transformerType_item)
  }

  @inline private[modeldb] def readTagValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeTagField(tag_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TagField)
    writeTagValue(tag_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTagValue(tag_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(tag_item)
  }

  @inline private[modeldb] def readFilepathValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeFilepathField(filepath_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FilepathField)
    writeFilepathValue(filepath_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFilepathValue(filepath_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(filepath_item)
  }


  object Immutable extends ThriftStructCodec3[Transformer] {
    override def encode(_item: Transformer, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): Transformer = Transformer.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[Transformer] = Transformer.metaData
  }

  /**
   * The default read-only implementation of Transformer.  You typically should not need to
   * directly reference this class; instead, use the Transformer.apply method to construct
   * new instances.
   */
  class Immutable(
      val id: Int,
      val transformerType: String,
      val tag: String,
      val filepath: _root_.scala.Option[String],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Transformer {
    def this(
      id: Int = -1,
      transformerType: String,
      tag: String = "",
      filepath: _root_.scala.Option[String] = _root_.scala.None
    ) = this(
      id,
      transformerType,
      tag,
      filepath,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val id: Int,
      transformerTypeOffset: Int,
      tagOffset: Int,
      filepathOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Transformer {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val transformerType: String =
      if (transformerTypeOffset == -1)
        null
      else {
        _proto.decodeString(_buf, transformerTypeOffset)
      }
    lazy val tag: String =
      if (tagOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, tagOffset)
      }
    lazy val filepath: _root_.scala.Option[String] =
      if (filepathOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, filepathOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the Transformer trait with additional state or
   * behavior and implement the read-only methods from Transformer using an underlying
   * instance.
   */
  trait Proxy extends Transformer {
    protected def _underlying_Transformer: Transformer
    override def id: Int = _underlying_Transformer.id
    override def transformerType: String = _underlying_Transformer.transformerType
    override def tag: String = _underlying_Transformer.tag
    override def filepath: _root_.scala.Option[String] = _underlying_Transformer.filepath
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_Transformer._passthroughFields
  }
}

/**
 * Prefer the companion object's [[modeldb.Transformer.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait Transformer
  extends ThriftStruct
  with _root_.scala.Product4[Int, String, String, Option[String]]
  with ValidatingThriftStruct[Transformer]
  with java.io.Serializable
{
  import Transformer._

  def id: Int
  def transformerType: String
  def tag: String
  def filepath: _root_.scala.Option[String]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: Int = id
  def _2: String = transformerType
  def _3: String = tag
  def _4: _root_.scala.Option[String] = filepath

  def toTuple: _root_.scala.Tuple4[Int, String, String, Option[String]] = {
    (
      id,
      transformerType,
      tag,
      filepath
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeIdValue(id, _oprot)
                _root_.scala.Some(Transformer.IdField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (transformerType ne null) {
                writeTransformerTypeValue(transformerType, _oprot)
                _root_.scala.Some(Transformer.TransformerTypeField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (tag ne null) {
                writeTagValue(tag, _oprot)
                _root_.scala.Some(Transformer.TagField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (filepath.isDefined) {
                writeFilepathValue(filepath.get, _oprot)
                _root_.scala.Some(Transformer.FilepathField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): Transformer = {
    var id: Int = this.id
    var transformerType: String = this.transformerType
    var tag: String = this.tag
    var filepath: _root_.scala.Option[String] = this.filepath
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        id = readIdValue(_blob.read)
      case 2 =>
        transformerType = readTransformerTypeValue(_blob.read)
      case 3 =>
        tag = readTagValue(_blob.read)
      case 4 =>
        filepath = _root_.scala.Some(readFilepathValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      id,
      transformerType,
      tag,
      filepath,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): Transformer = {
    var id: Int = this.id
    var transformerType: String = this.transformerType
    var tag: String = this.tag
    var filepath: _root_.scala.Option[String] = this.filepath

    _fieldId match {
      case 1 =>
        id = -1
      case 2 =>
        transformerType = null
      case 3 =>
        tag = ""
      case 4 =>
        filepath = _root_.scala.None
      case _ =>
    }
    new Immutable(
      id,
      transformerType,
      tag,
      filepath,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetId: Transformer = unsetField(1)

  def unsetTransformerType: Transformer = unsetField(2)

  def unsetTag: Transformer = unsetField(3)

  def unsetFilepath: Transformer = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    Transformer.validate(this)
    _oprot.writeStructBegin(Struct)
    writeIdField(id, _oprot)
    if (transformerType ne null) writeTransformerTypeField(transformerType, _oprot)
    if (tag ne null) writeTagField(tag, _oprot)
    if (filepath.isDefined) writeFilepathField(filepath.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    id: Int = this.id,
    transformerType: String = this.transformerType,
    tag: String = this.tag,
    filepath: _root_.scala.Option[String] = this.filepath,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): Transformer =
    new Immutable(
      id,
      transformerType,
      tag,
      filepath,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Transformer]

  private def _equals(x: Transformer, y: Transformer): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[Transformer])

  override def hashCode: Int = {
    var hash = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    hash
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.id
    case 1 => this.transformerType
    case 2 => this.tag
    case 3 => this.filepath
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Transformer"

  def _codec: ValidatingThriftStructCodec3[Transformer] = Transformer
}

