/**
 * Generated by Scrooge
 *   version: 18.10.0
 *   rev: dda071e1412b53f4bfdebc19e474f584e475d475
 *   built at: 20181018-174244
 */
package modeldb

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object TreeLink extends ValidatingThriftStructCodec3[TreeLink] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TreeLink")
  val ParentIndexField: TField = new TField("parentIndex", TType.I32, 1)
  val ParentIndexFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]
  val ChildIndexField: TField = new TField("childIndex", TType.I32, 2)
  val ChildIndexFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]
  val IsLeftField: TField = new TField("isLeft", TType.BOOL, 3)
  val IsLeftFieldManifest: Manifest[Boolean] = implicitly[Manifest[Boolean]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      ParentIndexField,
      false,
      false,
      ParentIndexFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ChildIndexField,
      false,
      false,
      ChildIndexFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      IsLeftField,
      false,
      false,
      IsLeftFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TreeLink): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TreeLink): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.parentIndex)
    buf ++= validateField(item.childIndex)
    buf ++= validateField(item.isLeft)
    buf.toList
  }

  def withoutPassthroughFields(original: TreeLink): TreeLink =
    new Immutable(
      parentIndex =
        {
          val field = original.parentIndex
          field
        },
      childIndex =
        {
          val field = original.childIndex
          field
        },
      isLeft =
        {
          val field = original.isLeft
          field
        }
    )

  override def encode(_item: TreeLink, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TreeLink = {

    var parentIndex: Int = 0
    var childIndex: Int = 0
    var isLeft: Boolean = false

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
    
                parentIndex = readParentIndexValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'parentIndex' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 =>
    
                childIndex = readChildIndexValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'childIndex' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.BOOL =>
    
                isLeft = readIsLeftValue(_iprot)
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'isLeft' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      parentIndex,
      childIndex,
      isLeft,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TreeLink =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[modeldb] def eagerDecode(_iprot: TProtocol): TreeLink = {
    var parentIndex: Int = 0
    var childIndex: Int = 0
    var isLeft: Boolean = false
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
                parentIndex = readParentIndexValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'parentIndex' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 =>
                childIndex = readChildIndexValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'childIndex' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.BOOL =>
                isLeft = readIsLeftValue(_iprot)
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'isLeft' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      parentIndex,
      childIndex,
      isLeft,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    parentIndex: Int,
    childIndex: Int,
    isLeft: Boolean
  ): TreeLink =
    new Immutable(
      parentIndex,
      childIndex,
      isLeft
    )

  def unapply(_item: TreeLink): _root_.scala.Option[_root_.scala.Tuple3[Int, Int, Boolean]] = _root_.scala.Some(_item.toTuple)


  @inline private[modeldb] def readParentIndexValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeParentIndexField(parentIndex_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ParentIndexField)
    writeParentIndexValue(parentIndex_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeParentIndexValue(parentIndex_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(parentIndex_item)
  }

  @inline private[modeldb] def readChildIndexValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeChildIndexField(childIndex_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ChildIndexField)
    writeChildIndexValue(childIndex_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeChildIndexValue(childIndex_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(childIndex_item)
  }

  @inline private[modeldb] def readIsLeftValue(_iprot: TProtocol): Boolean = {
    _iprot.readBool()
  }

  @inline private def writeIsLeftField(isLeft_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(IsLeftField)
    writeIsLeftValue(isLeft_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeIsLeftValue(isLeft_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeBool(isLeft_item)
  }


  object Immutable extends ThriftStructCodec3[TreeLink] {
    override def encode(_item: TreeLink, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TreeLink = TreeLink.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TreeLink] = TreeLink.metaData
  }

  /**
   * The default read-only implementation of TreeLink.  You typically should not need to
   * directly reference this class; instead, use the TreeLink.apply method to construct
   * new instances.
   */
  class Immutable(
      val parentIndex: Int,
      val childIndex: Int,
      val isLeft: Boolean,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TreeLink {
    def this(
      parentIndex: Int,
      childIndex: Int,
      isLeft: Boolean
    ) = this(
      parentIndex,
      childIndex,
      isLeft,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val parentIndex: Int,
      val childIndex: Int,
      val isLeft: Boolean,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TreeLink {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TreeLink trait with additional state or
   * behavior and implement the read-only methods from TreeLink using an underlying
   * instance.
   */
  trait Proxy extends TreeLink {
    protected def _underlying_TreeLink: TreeLink
    override def parentIndex: Int = _underlying_TreeLink.parentIndex
    override def childIndex: Int = _underlying_TreeLink.childIndex
    override def isLeft: Boolean = _underlying_TreeLink.isLeft
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TreeLink._passthroughFields
  }
}

/**
 * Prefer the companion object's [[modeldb.TreeLink.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TreeLink
  extends ThriftStruct
  with _root_.scala.Product3[Int, Int, Boolean]
  with ValidatingThriftStruct[TreeLink]
  with java.io.Serializable
{
  import TreeLink._

  def parentIndex: Int
  def childIndex: Int
  def isLeft: Boolean

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: Int = parentIndex
  def _2: Int = childIndex
  def _3: Boolean = isLeft

  def toTuple: _root_.scala.Tuple3[Int, Int, Boolean] = {
    (
      parentIndex,
      childIndex,
      isLeft
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeParentIndexValue(parentIndex, _oprot)
                _root_.scala.Some(TreeLink.ParentIndexField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (true) {
                writeChildIndexValue(childIndex, _oprot)
                _root_.scala.Some(TreeLink.ChildIndexField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (true) {
                writeIsLeftValue(isLeft, _oprot)
                _root_.scala.Some(TreeLink.IsLeftField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TreeLink = {
    var parentIndex: Int = this.parentIndex
    var childIndex: Int = this.childIndex
    var isLeft: Boolean = this.isLeft
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        parentIndex = readParentIndexValue(_blob.read)
      case 2 =>
        childIndex = readChildIndexValue(_blob.read)
      case 3 =>
        isLeft = readIsLeftValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      parentIndex,
      childIndex,
      isLeft,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TreeLink = {
    var parentIndex: Int = this.parentIndex
    var childIndex: Int = this.childIndex
    var isLeft: Boolean = this.isLeft

    _fieldId match {
      case 1 =>
        parentIndex = 0
      case 2 =>
        childIndex = 0
      case 3 =>
        isLeft = false
      case _ =>
    }
    new Immutable(
      parentIndex,
      childIndex,
      isLeft,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetParentIndex: TreeLink = unsetField(1)

  def unsetChildIndex: TreeLink = unsetField(2)

  def unsetIsLeft: TreeLink = unsetField(3)


  override def write(_oprot: TProtocol): Unit = {
    TreeLink.validate(this)
    _oprot.writeStructBegin(Struct)
    writeParentIndexField(parentIndex, _oprot)
    writeChildIndexField(childIndex, _oprot)
    writeIsLeftField(isLeft, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    parentIndex: Int = this.parentIndex,
    childIndex: Int = this.childIndex,
    isLeft: Boolean = this.isLeft,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TreeLink =
    new Immutable(
      parentIndex,
      childIndex,
      isLeft,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TreeLink]

  private def _equals(x: TreeLink, y: TreeLink): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TreeLink])

  override def hashCode: Int = {
    var hash = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    hash
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 3

  override def productElement(n: Int): Any = n match {
    case 0 => this.parentIndex
    case 1 => this.childIndex
    case 2 => this.isLeft
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TreeLink"

  def _codec: ValidatingThriftStructCodec3[TreeLink] = TreeLink
}

