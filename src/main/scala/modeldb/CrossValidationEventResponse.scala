/**
 * Generated by Scrooge
 *   version: 18.10.0
 *   rev: dda071e1412b53f4bfdebc19e474f584e475d475
 *   built at: 20181018-174244
 */
package modeldb

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object CrossValidationEventResponse extends ValidatingThriftStructCodec3[CrossValidationEventResponse] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("CrossValidationEventResponse")
  val DfIdField: TField = new TField("dfId", TType.I32, 1)
  val DfIdFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]
  val SpecIdField: TField = new TField("specId", TType.I32, 2)
  val SpecIdFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]
  val EventIdField: TField = new TField("eventId", TType.I32, 3)
  val EventIdFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]
  val FoldResponsesField: TField = new TField("foldResponses", TType.LIST, 4)
  val FoldResponsesFieldManifest: Manifest[Seq[modeldb.CrossValidationFoldResponse]] = implicitly[Manifest[Seq[modeldb.CrossValidationFoldResponse]]]
  val CrossValidationEventIdField: TField = new TField("crossValidationEventId", TType.I32, 5)
  val CrossValidationEventIdFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      DfIdField,
      false,
      false,
      DfIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      SpecIdField,
      false,
      false,
      SpecIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      EventIdField,
      false,
      false,
      EventIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      FoldResponsesField,
      false,
      false,
      FoldResponsesFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[modeldb.CrossValidationFoldResponse]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      CrossValidationEventIdField,
      false,
      false,
      CrossValidationEventIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: CrossValidationEventResponse): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: CrossValidationEventResponse): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.dfId)
    buf ++= validateField(item.specId)
    buf ++= validateField(item.eventId)
    buf ++= validateField(item.foldResponses)
    buf ++= validateField(item.crossValidationEventId)
    buf.toList
  }

  def withoutPassthroughFields(original: CrossValidationEventResponse): CrossValidationEventResponse =
    new Immutable(
      dfId =
        {
          val field = original.dfId
          field
        },
      specId =
        {
          val field = original.specId
          field
        },
      eventId =
        {
          val field = original.eventId
          field
        },
      foldResponses =
        {
          val field = original.foldResponses
          field.map { field =>
            modeldb.CrossValidationFoldResponse.withoutPassthroughFields(field)
          }
        },
      crossValidationEventId =
        {
          val field = original.crossValidationEventId
          field
        }
    )

  override def encode(_item: CrossValidationEventResponse, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): CrossValidationEventResponse = {

    var dfId: Int = 0
    var specId: Int = 0
    var eventId: Int = 0
    var foldResponses: Seq[modeldb.CrossValidationFoldResponse] = Seq[modeldb.CrossValidationFoldResponse]()
    var crossValidationEventId: Int = 0

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
    
                dfId = readDfIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'dfId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 =>
    
                specId = readSpecIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'specId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I32 =>
    
                eventId = readEventIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'eventId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.LIST =>
    
                foldResponses = readFoldResponsesValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'foldResponses' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 =>
    
                crossValidationEventId = readCrossValidationEventIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'crossValidationEventId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      dfId,
      specId,
      eventId,
      foldResponses,
      crossValidationEventId,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): CrossValidationEventResponse =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[modeldb] def eagerDecode(_iprot: TProtocol): CrossValidationEventResponse = {
    var dfId: Int = 0
    var specId: Int = 0
    var eventId: Int = 0
    var foldResponses: Seq[modeldb.CrossValidationFoldResponse] = Seq[modeldb.CrossValidationFoldResponse]()
    var crossValidationEventId: Int = 0
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
                dfId = readDfIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'dfId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 =>
                specId = readSpecIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'specId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I32 =>
                eventId = readEventIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'eventId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.LIST =>
                foldResponses = readFoldResponsesValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'foldResponses' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 =>
                crossValidationEventId = readCrossValidationEventIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'crossValidationEventId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      dfId,
      specId,
      eventId,
      foldResponses,
      crossValidationEventId,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    dfId: Int,
    specId: Int,
    eventId: Int,
    foldResponses: Seq[modeldb.CrossValidationFoldResponse] = Seq[modeldb.CrossValidationFoldResponse](),
    crossValidationEventId: Int
  ): CrossValidationEventResponse =
    new Immutable(
      dfId,
      specId,
      eventId,
      foldResponses,
      crossValidationEventId
    )

  def unapply(_item: CrossValidationEventResponse): _root_.scala.Option[_root_.scala.Tuple5[Int, Int, Int, Seq[modeldb.CrossValidationFoldResponse], Int]] = _root_.scala.Some(_item.toTuple)


  @inline private[modeldb] def readDfIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeDfIdField(dfId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DfIdField)
    writeDfIdValue(dfId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDfIdValue(dfId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(dfId_item)
  }

  @inline private[modeldb] def readSpecIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeSpecIdField(specId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SpecIdField)
    writeSpecIdValue(specId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSpecIdValue(specId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(specId_item)
  }

  @inline private[modeldb] def readEventIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeEventIdField(eventId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(EventIdField)
    writeEventIdValue(eventId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeEventIdValue(eventId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(eventId_item)
  }

  @inline private[modeldb] def readFoldResponsesValue(_iprot: TProtocol): Seq[modeldb.CrossValidationFoldResponse] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[modeldb.CrossValidationFoldResponse](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          modeldb.CrossValidationFoldResponse.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeFoldResponsesField(foldResponses_item: Seq[modeldb.CrossValidationFoldResponse], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FoldResponsesField)
    writeFoldResponsesValue(foldResponses_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFoldResponsesValue(foldResponses_item: Seq[modeldb.CrossValidationFoldResponse], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, foldResponses_item.size))
    foldResponses_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = foldResponses_item.size
        while (_i < _size) {
          val foldResponses_item_element = foldResponses_item(_i)
          foldResponses_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        foldResponses_item.foreach { foldResponses_item_element =>
          foldResponses_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[modeldb] def readCrossValidationEventIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeCrossValidationEventIdField(crossValidationEventId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CrossValidationEventIdField)
    writeCrossValidationEventIdValue(crossValidationEventId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCrossValidationEventIdValue(crossValidationEventId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(crossValidationEventId_item)
  }


  object Immutable extends ThriftStructCodec3[CrossValidationEventResponse] {
    override def encode(_item: CrossValidationEventResponse, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): CrossValidationEventResponse = CrossValidationEventResponse.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[CrossValidationEventResponse] = CrossValidationEventResponse.metaData
  }

  /**
   * The default read-only implementation of CrossValidationEventResponse.  You typically should not need to
   * directly reference this class; instead, use the CrossValidationEventResponse.apply method to construct
   * new instances.
   */
  class Immutable(
      val dfId: Int,
      val specId: Int,
      val eventId: Int,
      val foldResponses: Seq[modeldb.CrossValidationFoldResponse],
      val crossValidationEventId: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends CrossValidationEventResponse {
    def this(
      dfId: Int,
      specId: Int,
      eventId: Int,
      foldResponses: Seq[modeldb.CrossValidationFoldResponse] = Seq[modeldb.CrossValidationFoldResponse](),
      crossValidationEventId: Int
    ) = this(
      dfId,
      specId,
      eventId,
      foldResponses,
      crossValidationEventId,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val dfId: Int,
      val specId: Int,
      val eventId: Int,
      val foldResponses: Seq[modeldb.CrossValidationFoldResponse],
      val crossValidationEventId: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends CrossValidationEventResponse {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the CrossValidationEventResponse trait with additional state or
   * behavior and implement the read-only methods from CrossValidationEventResponse using an underlying
   * instance.
   */
  trait Proxy extends CrossValidationEventResponse {
    protected def _underlying_CrossValidationEventResponse: CrossValidationEventResponse
    override def dfId: Int = _underlying_CrossValidationEventResponse.dfId
    override def specId: Int = _underlying_CrossValidationEventResponse.specId
    override def eventId: Int = _underlying_CrossValidationEventResponse.eventId
    override def foldResponses: Seq[modeldb.CrossValidationFoldResponse] = _underlying_CrossValidationEventResponse.foldResponses
    override def crossValidationEventId: Int = _underlying_CrossValidationEventResponse.crossValidationEventId
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_CrossValidationEventResponse._passthroughFields
  }
}

/**
 * Prefer the companion object's [[modeldb.CrossValidationEventResponse.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait CrossValidationEventResponse
  extends ThriftStruct
  with _root_.scala.Product5[Int, Int, Int, Seq[modeldb.CrossValidationFoldResponse], Int]
  with ValidatingThriftStruct[CrossValidationEventResponse]
  with java.io.Serializable
{
  import CrossValidationEventResponse._

  def dfId: Int
  def specId: Int
  def eventId: Int
  def foldResponses: Seq[modeldb.CrossValidationFoldResponse]
  def crossValidationEventId: Int

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: Int = dfId
  def _2: Int = specId
  def _3: Int = eventId
  def _4: Seq[modeldb.CrossValidationFoldResponse] = foldResponses
  def _5: Int = crossValidationEventId

  def toTuple: _root_.scala.Tuple5[Int, Int, Int, Seq[modeldb.CrossValidationFoldResponse], Int] = {
    (
      dfId,
      specId,
      eventId,
      foldResponses,
      crossValidationEventId
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeDfIdValue(dfId, _oprot)
                _root_.scala.Some(CrossValidationEventResponse.DfIdField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (true) {
                writeSpecIdValue(specId, _oprot)
                _root_.scala.Some(CrossValidationEventResponse.SpecIdField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (true) {
                writeEventIdValue(eventId, _oprot)
                _root_.scala.Some(CrossValidationEventResponse.EventIdField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (foldResponses ne null) {
                writeFoldResponsesValue(foldResponses, _oprot)
                _root_.scala.Some(CrossValidationEventResponse.FoldResponsesField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (true) {
                writeCrossValidationEventIdValue(crossValidationEventId, _oprot)
                _root_.scala.Some(CrossValidationEventResponse.CrossValidationEventIdField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): CrossValidationEventResponse = {
    var dfId: Int = this.dfId
    var specId: Int = this.specId
    var eventId: Int = this.eventId
    var foldResponses: Seq[modeldb.CrossValidationFoldResponse] = this.foldResponses
    var crossValidationEventId: Int = this.crossValidationEventId
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        dfId = readDfIdValue(_blob.read)
      case 2 =>
        specId = readSpecIdValue(_blob.read)
      case 3 =>
        eventId = readEventIdValue(_blob.read)
      case 4 =>
        foldResponses = readFoldResponsesValue(_blob.read)
      case 5 =>
        crossValidationEventId = readCrossValidationEventIdValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      dfId,
      specId,
      eventId,
      foldResponses,
      crossValidationEventId,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): CrossValidationEventResponse = {
    var dfId: Int = this.dfId
    var specId: Int = this.specId
    var eventId: Int = this.eventId
    var foldResponses: Seq[modeldb.CrossValidationFoldResponse] = this.foldResponses
    var crossValidationEventId: Int = this.crossValidationEventId

    _fieldId match {
      case 1 =>
        dfId = 0
      case 2 =>
        specId = 0
      case 3 =>
        eventId = 0
      case 4 =>
        foldResponses = Seq[modeldb.CrossValidationFoldResponse]()
      case 5 =>
        crossValidationEventId = 0
      case _ =>
    }
    new Immutable(
      dfId,
      specId,
      eventId,
      foldResponses,
      crossValidationEventId,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetDfId: CrossValidationEventResponse = unsetField(1)

  def unsetSpecId: CrossValidationEventResponse = unsetField(2)

  def unsetEventId: CrossValidationEventResponse = unsetField(3)

  def unsetFoldResponses: CrossValidationEventResponse = unsetField(4)

  def unsetCrossValidationEventId: CrossValidationEventResponse = unsetField(5)


  override def write(_oprot: TProtocol): Unit = {
    CrossValidationEventResponse.validate(this)
    _oprot.writeStructBegin(Struct)
    writeDfIdField(dfId, _oprot)
    writeSpecIdField(specId, _oprot)
    writeEventIdField(eventId, _oprot)
    if (foldResponses ne null) writeFoldResponsesField(foldResponses, _oprot)
    writeCrossValidationEventIdField(crossValidationEventId, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    dfId: Int = this.dfId,
    specId: Int = this.specId,
    eventId: Int = this.eventId,
    foldResponses: Seq[modeldb.CrossValidationFoldResponse] = this.foldResponses,
    crossValidationEventId: Int = this.crossValidationEventId,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): CrossValidationEventResponse =
    new Immutable(
      dfId,
      specId,
      eventId,
      foldResponses,
      crossValidationEventId,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[CrossValidationEventResponse]

  private def _equals(x: CrossValidationEventResponse, y: CrossValidationEventResponse): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[CrossValidationEventResponse])

  override def hashCode: Int = {
    var hash = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    hash
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 5

  override def productElement(n: Int): Any = n match {
    case 0 => this.dfId
    case 1 => this.specId
    case 2 => this.eventId
    case 3 => this.foldResponses
    case 4 => this.crossValidationEventId
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "CrossValidationEventResponse"

  def _codec: ValidatingThriftStructCodec3[CrossValidationEventResponse] = CrossValidationEventResponse
}

