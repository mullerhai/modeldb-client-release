/**
 * Generated by Scrooge
 *   version: 18.10.0
 *   rev: dda071e1412b53f4bfdebc19e474f584e475d475
 *   built at: 20181018-174244
 */
package modeldb

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object DataFrame extends ValidatingThriftStructCodec3[DataFrame] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("DataFrame")
  val IdField: TField = new TField("id", TType.I32, 1)
  val IdFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]
  val SchemaField: TField = new TField("schema", TType.LIST, 2)
  val SchemaFieldManifest: Manifest[Seq[modeldb.DataFrameColumn]] = implicitly[Manifest[Seq[modeldb.DataFrameColumn]]]
  val NumRowsField: TField = new TField("numRows", TType.I32, 3)
  val NumRowsFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]
  val TagField: TField = new TField("tag", TType.STRING, 4)
  val TagFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val FilepathField: TField = new TField("filepath", TType.STRING, 5)
  val FilepathFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val MetadataField: TField = new TField("metadata", TType.LIST, 6)
  val MetadataFieldManifest: Manifest[Seq[modeldb.MetadataKV]] = implicitly[Manifest[Seq[modeldb.MetadataKV]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      IdField,
      false,
      false,
      IdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[Int](-1)
    ),
    new ThriftStructFieldInfo(
      SchemaField,
      false,
      false,
      SchemaFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[modeldb.DataFrameColumn]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      NumRowsField,
      false,
      false,
      NumRowsFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      TagField,
      false,
      false,
      TagFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[String]("")
    ),
    new ThriftStructFieldInfo(
      FilepathField,
      true,
      false,
      FilepathFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      MetadataField,
      true,
      false,
      MetadataFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[modeldb.MetadataKV]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: DataFrame): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: DataFrame): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.id)
    buf ++= validateField(item.schema)
    buf ++= validateField(item.numRows)
    buf ++= validateField(item.tag)
    buf ++= validateField(item.filepath)
    buf ++= validateField(item.metadata)
    buf.toList
  }

  def withoutPassthroughFields(original: DataFrame): DataFrame =
    new Immutable(
      id =
        {
          val field = original.id
          field
        },
      schema =
        {
          val field = original.schema
          field.map { field =>
            modeldb.DataFrameColumn.withoutPassthroughFields(field)
          }
        },
      numRows =
        {
          val field = original.numRows
          field
        },
      tag =
        {
          val field = original.tag
          field
        },
      filepath =
        {
          val field = original.filepath
          field.map { field =>
            field
          }
        },
      metadata =
        {
          val field = original.metadata
          field.map { field =>
            field.map { field =>
              modeldb.MetadataKV.withoutPassthroughFields(field)
            }
          }
        }
    )

  override def encode(_item: DataFrame, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): DataFrame = {

    var id: Int = -1
    var schema: Seq[modeldb.DataFrameColumn] = Seq[modeldb.DataFrameColumn]()
    var numRows: Int = 0
    var tagOffset: Int = -1
    var filepathOffset: Int = -1
    var metadata: Option[Seq[modeldb.MetadataKV]] = None

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
    
                id = readIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'id' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
    
                schema = readSchemaValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'schema' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I32 =>
    
                numRows = readNumRowsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'numRows' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                tagOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'tag' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                filepathOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'filepath' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.LIST =>
    
                metadata = Some(readMetadataValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'metadata' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      id,
      schema,
      numRows,
      tagOffset,
      filepathOffset,
      metadata,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): DataFrame =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[modeldb] def eagerDecode(_iprot: TProtocol): DataFrame = {
    var id: Int = -1
    var schema: Seq[modeldb.DataFrameColumn] = Seq[modeldb.DataFrameColumn]()
    var numRows: Int = 0
    var tag: String = ""
    var filepath: _root_.scala.Option[String] = _root_.scala.None
    var metadata: _root_.scala.Option[Seq[modeldb.MetadataKV]] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
                id = readIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'id' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
                schema = readSchemaValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'schema' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I32 =>
                numRows = readNumRowsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'numRows' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                tag = readTagValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'tag' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                filepath = _root_.scala.Some(readFilepathValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'filepath' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.LIST =>
                metadata = _root_.scala.Some(readMetadataValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'metadata' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      id,
      schema,
      numRows,
      tag,
      filepath,
      metadata,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    id: Int = -1,
    schema: Seq[modeldb.DataFrameColumn] = Seq[modeldb.DataFrameColumn](),
    numRows: Int,
    tag: String = "",
    filepath: _root_.scala.Option[String] = _root_.scala.None,
    metadata: _root_.scala.Option[Seq[modeldb.MetadataKV]] = _root_.scala.None
  ): DataFrame =
    new Immutable(
      id,
      schema,
      numRows,
      tag,
      filepath,
      metadata
    )

  def unapply(_item: DataFrame): _root_.scala.Option[_root_.scala.Tuple6[Int, Seq[modeldb.DataFrameColumn], Int, String, Option[String], Option[Seq[modeldb.MetadataKV]]]] = _root_.scala.Some(_item.toTuple)


  @inline private[modeldb] def readIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeIdField(id_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(IdField)
    writeIdValue(id_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeIdValue(id_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(id_item)
  }

  @inline private[modeldb] def readSchemaValue(_iprot: TProtocol): Seq[modeldb.DataFrameColumn] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[modeldb.DataFrameColumn](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          modeldb.DataFrameColumn.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeSchemaField(schema_item: Seq[modeldb.DataFrameColumn], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SchemaField)
    writeSchemaValue(schema_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSchemaValue(schema_item: Seq[modeldb.DataFrameColumn], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, schema_item.size))
    schema_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = schema_item.size
        while (_i < _size) {
          val schema_item_element = schema_item(_i)
          schema_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        schema_item.foreach { schema_item_element =>
          schema_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[modeldb] def readNumRowsValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeNumRowsField(numRows_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NumRowsField)
    writeNumRowsValue(numRows_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNumRowsValue(numRows_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(numRows_item)
  }

  @inline private[modeldb] def readTagValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeTagField(tag_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TagField)
    writeTagValue(tag_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTagValue(tag_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(tag_item)
  }

  @inline private[modeldb] def readFilepathValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeFilepathField(filepath_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FilepathField)
    writeFilepathValue(filepath_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFilepathValue(filepath_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(filepath_item)
  }

  @inline private[modeldb] def readMetadataValue(_iprot: TProtocol): Seq[modeldb.MetadataKV] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[modeldb.MetadataKV](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          modeldb.MetadataKV.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeMetadataField(metadata_item: Seq[modeldb.MetadataKV], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MetadataField)
    writeMetadataValue(metadata_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMetadataValue(metadata_item: Seq[modeldb.MetadataKV], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, metadata_item.size))
    metadata_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = metadata_item.size
        while (_i < _size) {
          val metadata_item_element = metadata_item(_i)
          metadata_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        metadata_item.foreach { metadata_item_element =>
          metadata_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }


  object Immutable extends ThriftStructCodec3[DataFrame] {
    override def encode(_item: DataFrame, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): DataFrame = DataFrame.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[DataFrame] = DataFrame.metaData
  }

  /**
   * The default read-only implementation of DataFrame.  You typically should not need to
   * directly reference this class; instead, use the DataFrame.apply method to construct
   * new instances.
   */
  class Immutable(
      val id: Int,
      val schema: Seq[modeldb.DataFrameColumn],
      val numRows: Int,
      val tag: String,
      val filepath: _root_.scala.Option[String],
      val metadata: _root_.scala.Option[Seq[modeldb.MetadataKV]],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends DataFrame {
    def this(
      id: Int = -1,
      schema: Seq[modeldb.DataFrameColumn] = Seq[modeldb.DataFrameColumn](),
      numRows: Int,
      tag: String = "",
      filepath: _root_.scala.Option[String] = _root_.scala.None,
      metadata: _root_.scala.Option[Seq[modeldb.MetadataKV]] = _root_.scala.None
    ) = this(
      id,
      schema,
      numRows,
      tag,
      filepath,
      metadata,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val id: Int,
      val schema: Seq[modeldb.DataFrameColumn],
      val numRows: Int,
      tagOffset: Int,
      filepathOffset: Int,
      val metadata: _root_.scala.Option[Seq[modeldb.MetadataKV]],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends DataFrame {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val tag: String =
      if (tagOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, tagOffset)
      }
    lazy val filepath: _root_.scala.Option[String] =
      if (filepathOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, filepathOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the DataFrame trait with additional state or
   * behavior and implement the read-only methods from DataFrame using an underlying
   * instance.
   */
  trait Proxy extends DataFrame {
    protected def _underlying_DataFrame: DataFrame
    override def id: Int = _underlying_DataFrame.id
    override def schema: Seq[modeldb.DataFrameColumn] = _underlying_DataFrame.schema
    override def numRows: Int = _underlying_DataFrame.numRows
    override def tag: String = _underlying_DataFrame.tag
    override def filepath: _root_.scala.Option[String] = _underlying_DataFrame.filepath
    override def metadata: _root_.scala.Option[Seq[modeldb.MetadataKV]] = _underlying_DataFrame.metadata
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_DataFrame._passthroughFields
  }
}

/**
 * Prefer the companion object's [[modeldb.DataFrame.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait DataFrame
  extends ThriftStruct
  with _root_.scala.Product6[Int, Seq[modeldb.DataFrameColumn], Int, String, Option[String], Option[Seq[modeldb.MetadataKV]]]
  with ValidatingThriftStruct[DataFrame]
  with java.io.Serializable
{
  import DataFrame._

  def id: Int
  def schema: Seq[modeldb.DataFrameColumn]
  def numRows: Int
  def tag: String
  def filepath: _root_.scala.Option[String]
  def metadata: _root_.scala.Option[Seq[modeldb.MetadataKV]]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: Int = id
  def _2: Seq[modeldb.DataFrameColumn] = schema
  def _3: Int = numRows
  def _4: String = tag
  def _5: _root_.scala.Option[String] = filepath
  def _6: _root_.scala.Option[Seq[modeldb.MetadataKV]] = metadata

  def toTuple: _root_.scala.Tuple6[Int, Seq[modeldb.DataFrameColumn], Int, String, Option[String], Option[Seq[modeldb.MetadataKV]]] = {
    (
      id,
      schema,
      numRows,
      tag,
      filepath,
      metadata
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeIdValue(id, _oprot)
                _root_.scala.Some(DataFrame.IdField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (schema ne null) {
                writeSchemaValue(schema, _oprot)
                _root_.scala.Some(DataFrame.SchemaField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (true) {
                writeNumRowsValue(numRows, _oprot)
                _root_.scala.Some(DataFrame.NumRowsField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (tag ne null) {
                writeTagValue(tag, _oprot)
                _root_.scala.Some(DataFrame.TagField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (filepath.isDefined) {
                writeFilepathValue(filepath.get, _oprot)
                _root_.scala.Some(DataFrame.FilepathField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (metadata.isDefined) {
                writeMetadataValue(metadata.get, _oprot)
                _root_.scala.Some(DataFrame.MetadataField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): DataFrame = {
    var id: Int = this.id
    var schema: Seq[modeldb.DataFrameColumn] = this.schema
    var numRows: Int = this.numRows
    var tag: String = this.tag
    var filepath: _root_.scala.Option[String] = this.filepath
    var metadata: _root_.scala.Option[Seq[modeldb.MetadataKV]] = this.metadata
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        id = readIdValue(_blob.read)
      case 2 =>
        schema = readSchemaValue(_blob.read)
      case 3 =>
        numRows = readNumRowsValue(_blob.read)
      case 4 =>
        tag = readTagValue(_blob.read)
      case 5 =>
        filepath = _root_.scala.Some(readFilepathValue(_blob.read))
      case 6 =>
        metadata = _root_.scala.Some(readMetadataValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      id,
      schema,
      numRows,
      tag,
      filepath,
      metadata,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): DataFrame = {
    var id: Int = this.id
    var schema: Seq[modeldb.DataFrameColumn] = this.schema
    var numRows: Int = this.numRows
    var tag: String = this.tag
    var filepath: _root_.scala.Option[String] = this.filepath
    var metadata: _root_.scala.Option[Seq[modeldb.MetadataKV]] = this.metadata

    _fieldId match {
      case 1 =>
        id = -1
      case 2 =>
        schema = Seq[modeldb.DataFrameColumn]()
      case 3 =>
        numRows = 0
      case 4 =>
        tag = ""
      case 5 =>
        filepath = _root_.scala.None
      case 6 =>
        metadata = _root_.scala.None
      case _ =>
    }
    new Immutable(
      id,
      schema,
      numRows,
      tag,
      filepath,
      metadata,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetId: DataFrame = unsetField(1)

  def unsetSchema: DataFrame = unsetField(2)

  def unsetNumRows: DataFrame = unsetField(3)

  def unsetTag: DataFrame = unsetField(4)

  def unsetFilepath: DataFrame = unsetField(5)

  def unsetMetadata: DataFrame = unsetField(6)


  override def write(_oprot: TProtocol): Unit = {
    DataFrame.validate(this)
    _oprot.writeStructBegin(Struct)
    writeIdField(id, _oprot)
    if (schema ne null) writeSchemaField(schema, _oprot)
    writeNumRowsField(numRows, _oprot)
    if (tag ne null) writeTagField(tag, _oprot)
    if (filepath.isDefined) writeFilepathField(filepath.get, _oprot)
    if (metadata.isDefined) writeMetadataField(metadata.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    id: Int = this.id,
    schema: Seq[modeldb.DataFrameColumn] = this.schema,
    numRows: Int = this.numRows,
    tag: String = this.tag,
    filepath: _root_.scala.Option[String] = this.filepath,
    metadata: _root_.scala.Option[Seq[modeldb.MetadataKV]] = this.metadata,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): DataFrame =
    new Immutable(
      id,
      schema,
      numRows,
      tag,
      filepath,
      metadata,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[DataFrame]

  private def _equals(x: DataFrame, y: DataFrame): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[DataFrame])

  override def hashCode: Int = {
    var hash = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    hash
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 6

  override def productElement(n: Int): Any = n match {
    case 0 => this.id
    case 1 => this.schema
    case 2 => this.numRows
    case 3 => this.tag
    case 4 => this.filepath
    case 5 => this.metadata
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "DataFrame"

  def _codec: ValidatingThriftStructCodec3[DataFrame] = DataFrame
}

