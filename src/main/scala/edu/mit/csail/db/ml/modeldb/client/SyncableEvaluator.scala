package edu.mit.csail.db.ml.modeldb.client

import edu.mit.csail.db.ml.modeldb.client.event.MetricEvent
import org.apache.spark.ml.Transformer
import org.apache.spark.ml.evaluation.{BinaryClassificationEvaluator, Evaluator, MulticlassClassificationEvaluator, RegressionEvaluator}
import org.apache.spark.sql.DataFrame

trait SyncableEvaluator {

  /**
    * This augements Spark Evaluators with the evaluateSync method, which logs a MetricEvent to the database after
    * running the evaluation.
    * @param e - The Evaluator.
    */
  implicit class EvaluateSync(e: Evaluator) {
    /**
      * Run the constructor's Evaluator on the given DataFrame, for which predictions were generated by the given
      * Transformer. This logs a MetricEvent to the server.
      * @param df - The DataFrame containing the predictions and labels.
      * @param m - The Transformer that produced the predictions.
      * @param mdbs - The syncer.
      * @return The evaluation metric value.
      */
    def evaluateSync(df: DataFrame, m: Transformer)(implicit mdbs: Option[ModelDbSyncer]): Double = {
      val metricVal = e.evaluate(df)
      if (mdbs.isDefined) {
        val (metricName, labelCol, predictionCol) = SyncableEvaluator.getMetricNameLabelColPredictionCol(e)
        mdbs.get.buffer(MetricEvent(df, m, labelCol, predictionCol, metricName, metricVal.toFloat))
      }
      metricVal
    }
  }
}

object SyncableEvaluator {
  /**
    * Gets the name of the metric, the name of the label column, and the name of the prediction column for the given
    * Evaluator.
    * @param eval - The Evaluator.
    * @return (metric name, label column, evaluation column).
    */
  def getMetricNameLabelColPredictionCol(eval: Evaluator): (String, String, String) = eval match {
    case e: RegressionEvaluator => (e.getMetricName, e.getLabelCol, e.getPredictionCol)
    case e: BinaryClassificationEvaluator => (e.getMetricName, e.getLabelCol, e.getRawPredictionCol)
    case e: MulticlassClassificationEvaluator => (e.getMetricName, e.getLabelCol, e.getPredictionCol)
    case _ => ("Unknown metric", "Unknown label column", "Unknown prediction column")
  }
}
